(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
global.mm = require('maxmind');

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"maxmind":2}],2:[function(require,module,exports){

var ls = require('./lib/lookup_service.js');

module.exports = ls;

},{"./lib/lookup_service.js":16}],3:[function(require,module,exports){

/* jshint indent: 2 */
// Do not modify this file, it was generated by
// ./tools/gen_continents.rb
module.exports = {
  "A1": "--",
  "A2": "--",
  "AD": "EU",
  "AE": "AS",
  "AF": "AS",
  "AG": "NA",
  "AI": "NA",
  "AL": "EU",
  "AM": "AS",
  "AN": "NA",
  "AO": "AF",
  "AP": "AS",
  "AQ": "AN",
  "AR": "SA",
  "AS": "OC",
  "AT": "EU",
  "AU": "OC",
  "AW": "NA",
  "AX": "EU",
  "AZ": "AS",
  "BA": "EU",
  "BB": "NA",
  "BD": "AS",
  "BE": "EU",
  "BF": "AF",
  "BG": "EU",
  "BH": "AS",
  "BI": "AF",
  "BJ": "AF",
  "BL": "NA",
  "BM": "NA",
  "BN": "AS",
  "BO": "SA",
  "BR": "SA",
  "BS": "NA",
  "BT": "AS",
  "BV": "AN",
  "BW": "AF",
  "BY": "EU",
  "BZ": "NA",
  "CA": "NA",
  "CC": "AS",
  "CD": "AF",
  "CF": "AF",
  "CG": "AF",
  "CH": "EU",
  "CI": "AF",
  "CK": "OC",
  "CL": "SA",
  "CM": "AF",
  "CN": "AS",
  "CO": "SA",
  "CR": "NA",
  "CU": "NA",
  "CV": "AF",
  "CX": "AS",
  "CY": "AS",
  "CZ": "EU",
  "DE": "EU",
  "DJ": "AF",
  "DK": "EU",
  "DM": "NA",
  "DO": "NA",
  "DZ": "AF",
  "EC": "SA",
  "EE": "EU",
  "EG": "AF",
  "EH": "AF",
  "ER": "AF",
  "ES": "EU",
  "ET": "AF",
  "EU": "EU",
  "FI": "EU",
  "FJ": "OC",
  "FK": "SA",
  "FM": "OC",
  "FO": "EU",
  "FR": "EU",
  "FX": "EU",
  "GA": "AF",
  "GB": "EU",
  "GD": "NA",
  "GE": "AS",
  "GF": "SA",
  "GG": "EU",
  "GH": "AF",
  "GI": "EU",
  "GL": "NA",
  "GM": "AF",
  "GN": "AF",
  "GP": "NA",
  "GQ": "AF",
  "GR": "EU",
  "GS": "AN",
  "GT": "NA",
  "GU": "OC",
  "GW": "AF",
  "GY": "SA",
  "HK": "AS",
  "HM": "AN",
  "HN": "NA",
  "HR": "EU",
  "HT": "NA",
  "HU": "EU",
  "ID": "AS",
  "IE": "EU",
  "IL": "AS",
  "IM": "EU",
  "IN": "AS",
  "IO": "AS",
  "IQ": "AS",
  "IR": "AS",
  "IS": "EU",
  "IT": "EU",
  "JE": "EU",
  "JM": "NA",
  "JO": "AS",
  "JP": "AS",
  "KE": "AF",
  "KG": "AS",
  "KH": "AS",
  "KI": "OC",
  "KM": "AF",
  "KN": "NA",
  "KP": "AS",
  "KR": "AS",
  "KW": "AS",
  "KY": "NA",
  "KZ": "AS",
  "LA": "AS",
  "LB": "AS",
  "LC": "NA",
  "LI": "EU",
  "LK": "AS",
  "LR": "AF",
  "LS": "AF",
  "LT": "EU",
  "LU": "EU",
  "LV": "EU",
  "LY": "AF",
  "MA": "AF",
  "MC": "EU",
  "MD": "EU",
  "ME": "EU",
  "MF": "NA",
  "MG": "AF",
  "MH": "OC",
  "MK": "EU",
  "ML": "AF",
  "MM": "AS",
  "MN": "AS",
  "MO": "AS",
  "MP": "OC",
  "MQ": "NA",
  "MR": "AF",
  "MS": "NA",
  "MT": "EU",
  "MU": "AF",
  "MV": "AS",
  "MW": "AF",
  "MX": "NA",
  "MY": "AS",
  "MZ": "AF",
  "NA": "AF",
  "NC": "OC",
  "NE": "AF",
  "NF": "OC",
  "NG": "AF",
  "NI": "NA",
  "NL": "EU",
  "NO": "EU",
  "NP": "AS",
  "NR": "OC",
  "NU": "OC",
  "NZ": "OC",
  "O1": "--",
  "OM": "AS",
  "PA": "NA",
  "PE": "SA",
  "PF": "OC",
  "PG": "OC",
  "PH": "AS",
  "PK": "AS",
  "PL": "EU",
  "PM": "NA",
  "PN": "OC",
  "PR": "NA",
  "PS": "AS",
  "PT": "EU",
  "PW": "OC",
  "PY": "SA",
  "QA": "AS",
  "RE": "AF",
  "RO": "EU",
  "RS": "EU",
  "RU": "EU",
  "RW": "AF",
  "SA": "AS",
  "SB": "OC",
  "SC": "AF",
  "SD": "AF",
  "SE": "EU",
  "SG": "AS",
  "SH": "AF",
  "SI": "EU",
  "SJ": "EU",
  "SK": "EU",
  "SL": "AF",
  "SM": "EU",
  "SN": "AF",
  "SO": "AF",
  "SR": "SA",
  "ST": "AF",
  "SV": "NA",
  "SY": "AS",
  "SZ": "AF",
  "TC": "NA",
  "TD": "AF",
  "TF": "AN",
  "TG": "AF",
  "TH": "AS",
  "TJ": "AS",
  "TK": "OC",
  "TL": "AS",
  "TM": "AS",
  "TN": "AF",
  "TO": "OC",
  "TR": "EU",
  "TT": "NA",
  "TV": "OC",
  "TW": "AS",
  "TZ": "AF",
  "UA": "EU",
  "UG": "AF",
  "UM": "OC",
  "US": "NA",
  "UY": "SA",
  "UZ": "AS",
  "VA": "EU",
  "VC": "NA",
  "VE": "SA",
  "VG": "NA",
  "VI": "NA",
  "VN": "AS",
  "VU": "OC",
  "WF": "OC",
  "WS": "OC",
  "YE": "AS",
  "YT": "AF",
  "ZA": "AF",
  "ZM": "AF",
  "ZW": "AF"
};

},{}],4:[function(require,module,exports){

module.exports.codes = [
  "--",
  "AP","EU","AD","AE","AF","AG","AI","AL","AM","CW",
  "AO","AQ","AR","AS","AT","AU","AW","AZ","BA","BB",
  "BD","BE","BF","BG","BH","BI","BJ","BM","BN","BO",
  "BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD",
  "CF","CG","CH","CI","CK","CL","CM","CN","CO","CR",
  "CU","CV","CX","CY","CZ","DE","DJ","DK","DM","DO",
  "DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ",
  "FK","FM","FO","FR","SX","GA","GB","GD","GE","GF",
  "GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT",
  "GU","GW","GY","HK","HM","HN","HR","HT","HU","ID",
  "IE","IL","IN","IO","IQ","IR","IS","IT","JM","JO",
  "JP","KE","KG","KH","KI","KM","KN","KP","KR","KW",
  "KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT",
  "LU","LV","LY","MA","MC","MD","MG","MH","MK","ML",
  "MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV",
  "MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI",
  "NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF",
  "PG","PH","PK","PL","PM","PN","PR","PS","PT","PW",
  "PY","QA","RE","RO","RU","RW","SA","SB","SC","SD",
  "SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO",
  "SR","ST","SV","SY","SZ","TC","TD","TF","TG","TH",
  "TJ","TK","TM","TN","TO","TL","TR","TT","TV","TW",
  "TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE",
  "VG","VI","VN","VU","WF","WS","YE","YT","RS","ZA",
  "ZM","ME","ZW","A1","A2","O1","AX","GG","IM","JE",
  "BL","MF", "BQ", "SS", "O1"
];

module.exports.names = [
  "N/A",
  "Asia/Pacific Region",
  "Europe",
  "Andorra",
  "United Arab Emirates",
  "Afghanistan",
  "Antigua and Barbuda",
  "Anguilla",
  "Albania",
  "Armenia",
  "Curacao",
  "Angola",
  "Antarctica",
  "Argentina",
  "American Samoa",
  "Austria",
  "Australia",
  "Aruba",
  "Azerbaijan",
  "Bosnia and Herzegovina",
  "Barbados",
  "Bangladesh",
  "Belgium",
  "Burkina Faso",
  "Bulgaria",
  "Bahrain",
  "Burundi",
  "Benin",
  "Bermuda",
  "Brunei Darussalam",
  "Bolivia",
  "Brazil",
  "Bahamas",
  "Bhutan",
  "Bouvet Island",
  "Botswana",
  "Belarus",
  "Belize",
  "Canada",
  "Cocos (Keeling) Islands",
  "Congo, The Democratic Republic of the",
  "Central African Republic",
  "Congo",
  "Switzerland",
  "Cote D'Ivoire",
  "Cook Islands",
  "Chile",
  "Cameroon",
  "China",
  "Colombia",
  "Costa Rica",
  "Cuba",
  "Cape Verde",
  "Christmas Island",
  "Cyprus",
  "Czech Republic",
  "Germany",
  "Djibouti",
  "Denmark",
  "Dominica",
  "Dominican Republic",
  "Algeria",
  "Ecuador",
  "Estonia",
  "Egypt",
  "Western Sahara",
  "Eritrea",
  "Spain",
  "Ethiopia",
  "Finland",
  "Fiji",
  "Falkland Islands (Malvinas)",
  "Micronesia, Federated States of",
  "Faroe Islands",
  "France",
  "Sint Maarten (Dutch part)",
  "Gabon",
  "United Kingdom",
  "Grenada",
  "Georgia",
  "French Guiana",
  "Ghana",
  "Gibraltar",
  "Greenland",
  "Gambia",
  "Guinea",
  "Guadeloupe",
  "Equatorial Guinea",
  "Greece",
  "South Georgia and the South Sandwich Islands",
  "Guatemala",
  "Guam",
  "Guinea-Bissau",
  "Guyana",
  "Hong Kong",
  "Heard Island and McDonald Islands",
  "Honduras",
  "Croatia",
  "Haiti",
  "Hungary",
  "Indonesia",
  "Ireland",
  "Israel",
  "India",
  "British Indian Ocean Territory",
  "Iraq",
  "Iran, Islamic Republic of",
  "Iceland",
  "Italy",
  "Jamaica",
  "Jordan",
  "Japan",
  "Kenya",
  "Kyrgyzstan",
  "Cambodia",
  "Kiribati",
  "Comoros",
  "Saint Kitts and Nevis",
  "Korea, Democratic People's Republic of",
  "Korea, Republic of",
  "Kuwait",
  "Cayman Islands",
  "Kazakhstan",
  "Lao People's Democratic Republic",
  "Lebanon",
  "Saint Lucia",
  "Liechtenstein",
  "Sri Lanka",
  "Liberia",
  "Lesotho",
  "Lithuania",
  "Luxembourg",
  "Latvia",
  "Libya",
  "Morocco",
  "Monaco",
  "Moldova, Republic of",
  "Madagascar",
  "Marshall Islands",
  "Macedonia",
  "Mali",
  "Myanmar",
  "Mongolia",
  "Macau",
  "Northern Mariana Islands",
  "Martinique",
  "Mauritania",
  "Montserrat",
  "Malta",
  "Mauritius",
  "Maldives",
  "Malawi",
  "Mexico",
  "Malaysia",
  "Mozambique",
  "Namibia",
  "New Caledonia",
  "Niger",
  "Norfolk Island",
  "Nigeria",
  "Nicaragua",
  "Netherlands",
  "Norway",
  "Nepal",
  "Nauru",
  "Niue",
  "New Zealand",
  "Oman",
  "Panama",
  "Peru",
  "French Polynesia",
  "Papua New Guinea",
  "Philippines",
  "Pakistan",
  "Poland",
  "Saint Pierre and Miquelon",
  "Pitcairn Islands",
  "Puerto Rico",
  "Palestinian Territory",
  "Portugal",
  "Palau",
  "Paraguay",
  "Qatar",
  "Reunion",
  "Romania",
  "Russian Federation",
  "Rwanda",
  "Saudi Arabia",
  "Solomon Islands",
  "Seychelles",
  "Sudan",
  "Sweden",
  "Singapore",
  "Saint Helena",
  "Slovenia",
  "Svalbard and Jan Mayen",
  "Slovakia",
  "Sierra Leone",
  "San Marino",
  "Senegal",
  "Somalia",
  "Suriname",
  "Sao Tome and Principe",
  "El Salvador",
  "Syrian Arab Republic",
  "Swaziland",
  "Turks and Caicos Islands",
  "Chad",
  "French Southern Territories",
  "Togo",
  "Thailand",
  "Tajikistan",
  "Tokelau",
  "Turkmenistan",
  "Tunisia",
  "Tonga",
  "Timor-Leste",
  "Turkey",
  "Trinidad and Tobago",
  "Tuvalu",
  "Taiwan",
  "Tanzania, United Republic of",
  "Ukraine",
  "Uganda",
  "United States Minor Outlying Islands",
  "United States",
  "Uruguay",
  "Uzbekistan",
  "Holy See (Vatican City State)",
  "Saint Vincent and the Grenadines",
  "Venezuela",
  "Virgin Islands, British",
  "Virgin Islands, U.S.",
  "Vietnam",
  "Vanuatu",
  "Wallis and Futuna",
  "Samoa",
  "Yemen",
  "Mayotte",
  "Serbia",
  "South Africa",
  "Zambia",
  "Montenegro",
  "Zimbabwe",
  "Anonymous Proxy",
  "Satellite Provider",
  "Other",
  "Aland Islands",
  "Guernsey",
  "Isle of Man",
  "Jersey",
  "Saint Barthelemy",
  "Saint Martin",
  "Bonaire, Saint Eustatius and Saba",
  "South Sudan",
  "Other"
];

},{}],5:[function(require,module,exports){

/* jshint indent: 2 */
// Do not modify this file, it was generated by
// ./tools/gen_time_zone.rb
module.exports = {
  "AD": {
    "2": "Canillo",
    "3": "Encamp",
    "4": "La Massana",
    "5": "Ordino",
    "6": "Sant Julia de Loria",
    "7": "Andorra la Vella",
    "8": "Escaldes-Engordany"
  },
  "AE": {
    "1": "Abu Dhabi",
    "2": "Ajman",
    "3": "Dubai",
    "4": "Fujairah",
    "5": "Ras Al Khaimah",
    "6": "Sharjah",
    "7": "Umm Al Quwain"
  },
  "AF": {
    "1": "Badakhshan",
    "2": "Badghis",
    "3": "Baghlan",
    "5": "Bamian",
    "6": "Farah",
    "7": "Faryab",
    "8": "Ghazni",
    "9": "Ghowr",
    "10": "Helmand",
    "11": "Herat",
    "13": "Kabol",
    "14": "Kapisa",
    "17": "Lowgar",
    "18": "Nangarhar",
    "19": "Nimruz",
    "23": "Kandahar",
    "24": "Kondoz",
    "26": "Takhar",
    "27": "Vardak",
    "28": "Zabol",
    "29": "Paktika",
    "30": "Balkh",
    "31": "Jowzjan",
    "32": "Samangan",
    "33": "Sar-e Pol",
    "34": "Konar",
    "35": "Laghman",
    "36": "Paktia",
    "37": "Khowst",
    "38": "Nurestan",
    "39": "Oruzgan",
    "40": "Parvan",
    "41": "Daykondi",
    "42": "Panjshir"
  },
  "AG": {
    "1": "Barbuda",
    "3": "Saint George",
    "4": "Saint John",
    "5": "Saint Mary",
    "6": "Saint Paul",
    "7": "Saint Peter",
    "8": "Saint Philip",
    "9": "Redonda"
  },
  "AL": {
    "40": "Berat",
    "41": "Diber",
    "42": "Durres",
    "43": "Elbasan",
    "44": "Fier",
    "45": "Gjirokaster",
    "46": "Korce",
    "47": "Kukes",
    "48": "Lezhe",
    "49": "Shkoder",
    "50": "Tirane",
    "51": "Vlore"
  },
  "AM": {
    "1": "Aragatsotn",
    "2": "Ararat",
    "3": "Armavir",
    "4": "Geghark'unik'",
    "5": "Kotayk'",
    "6": "Lorri",
    "7": "Shirak",
    "8": "Syunik'",
    "9": "Tavush",
    "10": "Vayots' Dzor",
    "11": "Yerevan"
  },
  "AO": {
    "1": "Benguela",
    "2": "Bie",
    "3": "Cabinda",
    "4": "Cuando Cubango",
    "5": "Cuanza Norte",
    "6": "Cuanza Sul",
    "7": "Cunene",
    "8": "Huambo",
    "9": "Huila",
    "12": "Malanje",
    "13": "Namibe",
    "14": "Moxico",
    "15": "Uige",
    "16": "Zaire",
    "17": "Lunda Norte",
    "18": "Lunda Sul",
    "19": "Bengo",
    "20": "Luanda"
  },
  "AR": {
    "1": "Buenos Aires",
    "2": "Catamarca",
    "3": "Chaco",
    "4": "Chubut",
    "5": "Cordoba",
    "6": "Corrientes",
    "7": "Distrito Federal",
    "8": "Entre Rios",
    "9": "Formosa",
    "10": "Jujuy",
    "11": "La Pampa",
    "12": "La Rioja",
    "13": "Mendoza",
    "14": "Misiones",
    "15": "Neuquen",
    "16": "Rio Negro",
    "17": "Salta",
    "18": "San Juan",
    "19": "San Luis",
    "20": "Santa Cruz",
    "21": "Santa Fe",
    "22": "Santiago del Estero",
    "23": "Tierra del Fuego",
    "24": "Tucuman"
  },
  "AT": {
    "1": "Burgenland",
    "2": "Karnten",
    "3": "Niederosterreich",
    "4": "Oberosterreich",
    "5": "Salzburg",
    "6": "Steiermark",
    "7": "Tirol",
    "8": "Vorarlberg",
    "9": "Wien"
  },
  "AU": {
    "1": "Australian Capital Territory",
    "2": "New South Wales",
    "3": "Northern Territory",
    "4": "Queensland",
    "5": "South Australia",
    "6": "Tasmania",
    "7": "Victoria",
    "8": "Western Australia"
  },
  "AZ": {
    "1": "Abseron",
    "2": "Agcabadi",
    "3": "Agdam",
    "4": "Agdas",
    "5": "Agstafa",
    "6": "Agsu",
    "7": "Ali Bayramli",
    "8": "Astara",
    "9": "Baki",
    "10": "Balakan",
    "11": "Barda",
    "12": "Beylaqan",
    "13": "Bilasuvar",
    "14": "Cabrayil",
    "15": "Calilabad",
    "16": "Daskasan",
    "17": "Davaci",
    "18": "Fuzuli",
    "19": "Gadabay",
    "20": "Ganca",
    "21": "Goranboy",
    "22": "Goycay",
    "23": "Haciqabul",
    "24": "Imisli",
    "25": "Ismayilli",
    "26": "Kalbacar",
    "27": "Kurdamir",
    "28": "Lacin",
    "29": "Lankaran",
    "30": "Lankaran",
    "31": "Lerik",
    "32": "Masalli",
    "33": "Mingacevir",
    "34": "Naftalan",
    "35": "Naxcivan",
    "36": "Neftcala",
    "37": "Oguz",
    "38": "Qabala",
    "39": "Qax",
    "40": "Qazax",
    "41": "Qobustan",
    "42": "Quba",
    "43": "Qubadli",
    "44": "Qusar",
    "45": "Saatli",
    "46": "Sabirabad",
    "47": "Saki",
    "48": "Saki",
    "49": "Salyan",
    "50": "Samaxi",
    "51": "Samkir",
    "52": "Samux",
    "53": "Siyazan",
    "54": "Sumqayit",
    "55": "Susa",
    "56": "Susa",
    "57": "Tartar",
    "58": "Tovuz",
    "59": "Ucar",
    "60": "Xacmaz",
    "61": "Xankandi",
    "62": "Xanlar",
    "63": "Xizi",
    "64": "Xocali",
    "65": "Xocavand",
    "66": "Yardimli",
    "67": "Yevlax",
    "68": "Yevlax",
    "69": "Zangilan",
    "70": "Zaqatala",
    "71": "Zardab"
  },
  "BA": {
    "1": "Federation of Bosnia and Herzegovina",
    "3": "Brcko District",
    "2": "Republika Srpska"
  },
  "BB": {
    "1": "Christ Church",
    "2": "Saint Andrew",
    "3": "Saint George",
    "4": "Saint James",
    "5": "Saint John",
    "6": "Saint Joseph",
    "7": "Saint Lucy",
    "8": "Saint Michael",
    "9": "Saint Peter",
    "10": "Saint Philip",
    "11": "Saint Thomas"
  },
  "BD": {
    "81": "Dhaka",
    "82": "Khulna",
    "83": "Rajshahi",
    "84": "Chittagong",
    "85": "Barisal",
    "86": "Sylhet",
    "87": "Rangpur"
  },
  "BE": {
    "1": "Antwerpen",
    "3": "Hainaut",
    "4": "Liege",
    "5": "Limburg",
    "6": "Luxembourg",
    "7": "Namur",
    "8": "Oost-Vlaanderen",
    "9": "West-Vlaanderen",
    "10": "Brabant Wallon",
    "11": "Brussels Hoofdstedelijk Gewest",
    "12": "Vlaams-Brabant",
    "13": "Flanders",
    "14": "Wallonia"
  },
  "BF": {
    "15": "Bam",
    "19": "Boulkiemde",
    "20": "Ganzourgou",
    "21": "Gnagna",
    "28": "Kouritenga",
    "33": "Oudalan",
    "34": "Passore",
    "36": "Sanguie",
    "40": "Soum",
    "42": "Tapoa",
    "44": "Zoundweogo",
    "45": "Bale",
    "46": "Banwa",
    "47": "Bazega",
    "48": "Bougouriba",
    "49": "Boulgou",
    "50": "Gourma",
    "51": "Houet",
    "52": "Ioba",
    "53": "Kadiogo",
    "54": "Kenedougou",
    "55": "Komoe",
    "56": "Komondjari",
    "57": "Kompienga",
    "58": "Kossi",
    "59": "Koulpelogo",
    "60": "Kourweogo",
    "61": "Leraba",
    "62": "Loroum",
    "63": "Mouhoun",
    "64": "Namentenga",
    "65": "Naouri",
    "66": "Nayala",
    "67": "Noumbiel",
    "68": "Oubritenga",
    "69": "Poni",
    "70": "Sanmatenga",
    "71": "Seno",
    "72": "Sissili",
    "73": "Sourou",
    "74": "Tuy",
    "75": "Yagha",
    "76": "Yatenga",
    "77": "Ziro",
    "78": "Zondoma"
  },
  "BG": {
    "33": "Mikhaylovgrad",
    "38": "Blagoevgrad",
    "39": "Burgas",
    "40": "Dobrich",
    "41": "Gabrovo",
    "42": "Grad Sofiya",
    "43": "Khaskovo",
    "44": "Kurdzhali",
    "45": "Kyustendil",
    "46": "Lovech",
    "47": "Montana",
    "48": "Pazardzhik",
    "49": "Pernik",
    "50": "Pleven",
    "51": "Plovdiv",
    "52": "Razgrad",
    "53": "Ruse",
    "54": "Shumen",
    "55": "Silistra",
    "56": "Sliven",
    "57": "Smolyan",
    "58": "Sofiya",
    "59": "Stara Zagora",
    "60": "Turgovishte",
    "61": "Varna",
    "62": "Veliko Turnovo",
    "63": "Vidin",
    "64": "Vratsa",
    "65": "Yambol"
  },
  "BH": {
    "1": "Al Hadd",
    "2": "Al Manamah",
    "5": "Jidd Hafs",
    "6": "Sitrah",
    "8": "Al Mintaqah al Gharbiyah",
    "9": "Mintaqat Juzur Hawar",
    "10": "Al Mintaqah ash Shamaliyah",
    "11": "Al Mintaqah al Wusta",
    "12": "Madinat",
    "13": "Ar Rifa",
    "14": "Madinat Hamad",
    "15": "Al Muharraq",
    "16": "Al Asimah",
    "17": "Al Janubiyah",
    "18": "Ash Shamaliyah",
    "19": "Al Wusta"
  },
  "BI": {
    "2": "Bujumbura",
    "9": "Bubanza",
    "10": "Bururi",
    "11": "Cankuzo",
    "12": "Cibitoke",
    "13": "Gitega",
    "14": "Karuzi",
    "15": "Kayanza",
    "16": "Kirundo",
    "17": "Makamba",
    "18": "Muyinga",
    "19": "Ngozi",
    "20": "Rutana",
    "21": "Ruyigi",
    "22": "Muramvya",
    "23": "Mwaro"
  },
  "BJ": {
    "7": "Alibori",
    "8": "Atakora",
    "9": "Atlanyique",
    "10": "Borgou",
    "11": "Collines",
    "12": "Kouffo",
    "13": "Donga",
    "14": "Littoral",
    "15": "Mono",
    "16": "Oueme",
    "17": "Plateau",
    "18": "Zou"
  },
  "BM": {
    "1": "Devonshire",
    "2": "Hamilton",
    "3": "Hamilton",
    "4": "Paget",
    "5": "Pembroke",
    "6": "Saint George",
    "7": "Saint George's",
    "8": "Sandys",
    "9": "Smiths",
    "10": "Southampton",
    "11": "Warwick"
  },
  "BN": {
    "7": "Alibori",
    "8": "Belait",
    "9": "Brunei and Muara",
    "10": "Temburong",
    "11": "Collines",
    "12": "Kouffo",
    "13": "Donga",
    "14": "Littoral",
    "15": "Tutong",
    "16": "Oueme",
    "17": "Plateau",
    "18": "Zou"
  },
  "BO": {
    "1": "Chuquisaca",
    "2": "Cochabamba",
    "3": "El Beni",
    "4": "La Paz",
    "5": "Oruro",
    "6": "Pando",
    "7": "Potosi",
    "8": "Santa Cruz",
    "9": "Tarija"
  },
  "BR": {
    "1": "Acre",
    "2": "Alagoas",
    "3": "Amapa",
    "4": "Amazonas",
    "5": "Bahia",
    "6": "Ceara",
    "7": "Distrito Federal",
    "8": "Espirito Santo",
    "11": "Mato Grosso do Sul",
    "13": "Maranhao",
    "14": "Mato Grosso",
    "15": "Minas Gerais",
    "16": "Para",
    "17": "Paraiba",
    "18": "Parana",
    "20": "Piaui",
    "21": "Rio de Janeiro",
    "22": "Rio Grande do Norte",
    "23": "Rio Grande do Sul",
    "24": "Rondonia",
    "25": "Roraima",
    "26": "Santa Catarina",
    "27": "Sao Paulo",
    "28": "Sergipe",
    "29": "Goias",
    "30": "Pernambuco",
    "31": "Tocantins"
  },
  "BS": {
    "5": "Bimini",
    "6": "Cat Island",
    "10": "Exuma",
    "13": "Inagua",
    "15": "Long Island",
    "16": "Mayaguana",
    "18": "Ragged Island",
    "22": "Harbour Island",
    "23": "New Providence",
    "24": "Acklins and Crooked Islands",
    "25": "Freeport",
    "26": "Fresh Creek",
    "27": "Governor's Harbour",
    "28": "Green Turtle Cay",
    "29": "High Rock",
    "30": "Kemps Bay",
    "31": "Marsh Harbour",
    "32": "Nichollstown and Berry Islands",
    "33": "Rock Sound",
    "34": "Sandy Point",
    "35": "San Salvador and Rum Cay"
  },
  "BT": {
    "5": "Bumthang",
    "6": "Chhukha",
    "7": "Chirang",
    "8": "Daga",
    "9": "Geylegphug",
    "10": "Ha",
    "11": "Lhuntshi",
    "12": "Mongar",
    "13": "Paro",
    "14": "Pemagatsel",
    "15": "Punakha",
    "16": "Samchi",
    "17": "Samdrup",
    "18": "Shemgang",
    "19": "Tashigang",
    "20": "Thimphu",
    "21": "Tongsa",
    "22": "Wangdi Phodrang"
  },
  "BW": {
    "1": "Central",
    "3": "Ghanzi",
    "4": "Kgalagadi",
    "5": "Kgatleng",
    "6": "Kweneng",
    "8": "North-East",
    "9": "South-East",
    "10": "Southern",
    "11": "North-West"
  },
  "BY": {
    "1": "Brestskaya Voblasts'",
    "2": "Homyel'skaya Voblasts'",
    "3": "Hrodzyenskaya Voblasts'",
    "4": "Minsk",
    "5": "Minskaya Voblasts'",
    "6": "Mahilyowskaya Voblasts'",
    "7": "Vitsyebskaya Voblasts'"
  },
  "BZ": {
    "1": "Belize",
    "2": "Cayo",
    "3": "Corozal",
    "4": "Orange Walk",
    "5": "Stann Creek",
    "6": "Toledo"
  },
  "CA": {
    "849": "Alberta",
    "893": "British Columbia",
    "1365": "Manitoba",
    "1408": "New Brunswick",
    "1418": "Newfoundland",
    "1425": "Nova Scotia",
    "1426": "Northwest Territories",
    "1427": "Nunavut",
    "1463": "Ontario",
    "1497": "Prince Edward Island",
    "1538": "Quebec",
    "1632": "Saskatchewan",
    "1899": "Yukon Territory"
  },
  "CD": {
    "1": "Bandundu",
    "2": "Equateur",
    "4": "Kasai-Oriental",
    "5": "Katanga",
    "6": "Kinshasa",
    "8": "Bas-Congo",
    "9": "Orientale",
    "10": "Maniema",
    "11": "Nord-Kivu",
    "12": "Sud-Kivu"
  },
  "CF": {
    "1": "Bamingui-Bangoran",
    "2": "Basse-Kotto",
    "3": "Haute-Kotto",
    "4": "Mambere-Kadei",
    "5": "Haut-Mbomou",
    "6": "Kemo",
    "7": "Lobaye",
    "8": "Mbomou",
    "9": "Nana-Mambere",
    "11": "Ouaka",
    "12": "Ouham",
    "13": "Ouham-Pende",
    "14": "Cuvette-Ouest",
    "15": "Nana-Grebizi",
    "16": "Sangha-Mbaere",
    "17": "Ombella-Mpoko",
    "18": "Bangui"
  },
  "CG": {
    "1": "Bouenza",
    "4": "Kouilou",
    "5": "Lekoumou",
    "6": "Likouala",
    "7": "Niari",
    "8": "Plateaux",
    "10": "Sangha",
    "11": "Pool",
    "12": "Brazzaville",
    "13": "Cuvette",
    "14": "Cuvette-Ouest"
  },
  "CH": {
    "1": "Aargau",
    "2": "Ausser-Rhoden",
    "3": "Basel-Landschaft",
    "4": "Basel-Stadt",
    "5": "Bern",
    "6": "Fribourg",
    "7": "Geneve",
    "8": "Glarus",
    "9": "Graubunden",
    "10": "Inner-Rhoden",
    "11": "Luzern",
    "12": "Neuchatel",
    "13": "Nidwalden",
    "14": "Obwalden",
    "15": "Sankt Gallen",
    "16": "Schaffhausen",
    "17": "Schwyz",
    "18": "Solothurn",
    "19": "Thurgau",
    "20": "Ticino",
    "21": "Uri",
    "22": "Valais",
    "23": "Vaud",
    "24": "Zug",
    "25": "Zurich",
    "26": "Jura"
  },
  "CI": {
    "74": "Agneby",
    "75": "Bafing",
    "76": "Bas-Sassandra",
    "77": "Denguele",
    "78": "Dix-Huit Montagnes",
    "79": "Fromager",
    "80": "Haut-Sassandra",
    "81": "Lacs",
    "82": "Lagunes",
    "83": "Marahoue",
    "84": "Moyen-Cavally",
    "85": "Moyen-Comoe",
    "86": "N'zi-Comoe",
    "87": "Savanes",
    "88": "Sud-Bandama",
    "89": "Sud-Comoe",
    "90": "Vallee du Bandama",
    "91": "Worodougou",
    "92": "Zanzan"
  },
  "CL": {
    "1": "Valparaiso",
    "2": "Aisen del General Carlos Ibanez del Campo",
    "3": "Antofagasta",
    "4": "Araucania",
    "5": "Atacama",
    "6": "Bio-Bio",
    "7": "Coquimbo",
    "8": "Libertador General Bernardo O'Higgins",
    "9": "Los Lagos",
    "10": "Magallanes y de la Antartica Chilena",
    "11": "Maule",
    "12": "Region Metropolitana",
    "13": "Tarapaca",
    "14": "Los Lagos",
    "15": "Tarapaca",
    "16": "Arica y Parinacota",
    "17": "Los Rios"
  },
  "CM": {
    "4": "Est",
    "5": "Littoral",
    "7": "Nord-Ouest",
    "8": "Ouest",
    "9": "Sud-Ouest",
    "10": "Adamaoua",
    "11": "Centre",
    "12": "Extreme-Nord",
    "13": "Nord",
    "14": "Sud"
  },
  "CN": {
    "1": "Anhui",
    "2": "Zhejiang",
    "3": "Jiangxi",
    "4": "Jiangsu",
    "5": "Jilin",
    "6": "Qinghai",
    "7": "Fujian",
    "8": "Heilongjiang",
    "9": "Henan",
    "10": "Hebei",
    "11": "Hunan",
    "12": "Hubei",
    "13": "Xinjiang",
    "14": "Xizang",
    "15": "Gansu",
    "16": "Guangxi",
    "18": "Guizhou",
    "19": "Liaoning",
    "20": "Nei Mongol",
    "21": "Ningxia",
    "22": "Beijing",
    "23": "Shanghai",
    "24": "Shanxi",
    "25": "Shandong",
    "26": "Shaanxi",
    "28": "Tianjin",
    "29": "Yunnan",
    "30": "Guangdong",
    "31": "Hainan",
    "32": "Sichuan",
    "33": "Chongqing"
  },
  "CO": {
    "1": "Amazonas",
    "2": "Antioquia",
    "3": "Arauca",
    "4": "Atlantico",
    "8": "Caqueta",
    "9": "Cauca",
    "10": "Cesar",
    "11": "Choco",
    "12": "Cordoba",
    "14": "Guaviare",
    "15": "Guainia",
    "16": "Huila",
    "17": "La Guajira",
    "19": "Meta",
    "20": "Narino",
    "21": "Norte de Santander",
    "22": "Putumayo",
    "23": "Quindio",
    "24": "Risaralda",
    "25": "San Andres y Providencia",
    "26": "Santander",
    "27": "Sucre",
    "28": "Tolima",
    "29": "Valle del Cauca",
    "30": "Vaupes",
    "31": "Vichada",
    "32": "Casanare",
    "33": "Cundinamarca",
    "34": "Distrito Especial",
    "35": "Bolivar",
    "36": "Boyaca",
    "37": "Caldas",
    "38": "Magdalena"
  },
  "CR": {
    "1": "Alajuela",
    "2": "Cartago",
    "3": "Guanacaste",
    "4": "Heredia",
    "6": "Limon",
    "7": "Puntarenas",
    "8": "San Jose"
  },
  "CU": {
    "1": "Pinar del Rio",
    "2": "Ciudad de la Habana",
    "3": "Matanzas",
    "4": "Isla de la Juventud",
    "5": "Camaguey",
    "7": "Ciego de Avila",
    "8": "Cienfuegos",
    "9": "Granma",
    "10": "Guantanamo",
    "11": "La Habana",
    "12": "Holguin",
    "13": "Las Tunas",
    "14": "Sancti Spiritus",
    "15": "Santiago de Cuba",
    "16": "Villa Clara"
  },
  "CV": {
    "1": "Boa Vista",
    "2": "Brava",
    "4": "Maio",
    "5": "Paul",
    "7": "Ribeira Grande",
    "8": "Sal",
    "10": "Sao Nicolau",
    "11": "Sao Vicente",
    "13": "Mosteiros",
    "14": "Praia",
    "15": "Santa Catarina",
    "16": "Santa Cruz",
    "17": "Sao Domingos",
    "18": "Sao Filipe",
    "19": "Sao Miguel",
    "20": "Tarrafal"
  },
  "CY": {
    "1": "Famagusta",
    "2": "Kyrenia",
    "3": "Larnaca",
    "4": "Nicosia",
    "5": "Limassol",
    "6": "Paphos"
  },
  "CZ": {
    "52": "Hlavni mesto Praha",
    "78": "Jihomoravsky kraj",
    "79": "Jihocesky kraj",
    "80": "Vysocina",
    "81": "Karlovarsky kraj",
    "82": "Kralovehradecky kraj",
    "83": "Liberecky kraj",
    "84": "Olomoucky kraj",
    "85": "Moravskoslezsky kraj",
    "86": "Pardubicky kraj",
    "87": "Plzensky kraj",
    "88": "Stredocesky kraj",
    "89": "Ustecky kraj",
    "90": "Zlinsky kraj"
  },
  "DE": {
    "1": "Baden-Wurttemberg",
    "2": "Bayern",
    "3": "Bremen",
    "4": "Hamburg",
    "5": "Hessen",
    "6": "Niedersachsen",
    "7": "Nordrhein-Westfalen",
    "8": "Rheinland-Pfalz",
    "9": "Saarland",
    "10": "Schleswig-Holstein",
    "11": "Brandenburg",
    "12": "Mecklenburg-Vorpommern",
    "13": "Sachsen",
    "14": "Sachsen-Anhalt",
    "15": "Thuringen",
    "16": "Berlin"
  },
  "DJ": {
    "1": "Ali Sabieh",
    "4": "Obock",
    "5": "Tadjoura",
    "6": "Dikhil",
    "7": "Djibouti",
    "8": "Arta"
  },
  "DK": {
    "17": "Hovedstaden",
    "18": "Midtjylland",
    "19": "Nordjylland",
    "20": "Sjelland",
    "21": "Syddanmark"
  },
  "DM": {
    "2": "Saint Andrew",
    "3": "Saint David",
    "4": "Saint George",
    "5": "Saint John",
    "6": "Saint Joseph",
    "7": "Saint Luke",
    "8": "Saint Mark",
    "9": "Saint Patrick",
    "10": "Saint Paul",
    "11": "Saint Peter"
  },
  "DO": {
    "1": "Azua",
    "2": "Baoruco",
    "3": "Barahona",
    "4": "Dajabon",
    "5": "Distrito Nacional",
    "6": "Duarte",
    "8": "Espaillat",
    "9": "Independencia",
    "10": "La Altagracia",
    "11": "Elias Pina",
    "12": "La Romana",
    "14": "Maria Trinidad Sanchez",
    "15": "Monte Cristi",
    "16": "Pedernales",
    "17": "Peravia",
    "18": "Puerto Plata",
    "19": "Salcedo",
    "20": "Samana",
    "21": "Sanchez Ramirez",
    "23": "San Juan",
    "24": "San Pedro De Macoris",
    "25": "Santiago",
    "26": "Santiago Rodriguez",
    "27": "Valverde",
    "28": "El Seibo",
    "29": "Hato Mayor",
    "30": "La Vega",
    "31": "Monsenor Nouel",
    "32": "Monte Plata",
    "33": "San Cristobal",
    "34": "Distrito Nacional",
    "35": "Peravia",
    "36": "San Jose de Ocoa",
    "37": "Santo Domingo"
  },
  "DZ": {
    "1": "Alger",
    "3": "Batna",
    "4": "Constantine",
    "6": "Medea",
    "7": "Mostaganem",
    "9": "Oran",
    "10": "Saida",
    "12": "Setif",
    "13": "Tiaret",
    "14": "Tizi Ouzou",
    "15": "Tlemcen",
    "18": "Bejaia",
    "19": "Biskra",
    "20": "Blida",
    "21": "Bouira",
    "22": "Djelfa",
    "23": "Guelma",
    "24": "Jijel",
    "25": "Laghouat",
    "26": "Mascara",
    "27": "M'sila",
    "29": "Oum el Bouaghi",
    "30": "Sidi Bel Abbes",
    "31": "Skikda",
    "33": "Tebessa",
    "34": "Adrar",
    "35": "Ain Defla",
    "36": "Ain Temouchent",
    "37": "Annaba",
    "38": "Bechar",
    "39": "Bordj Bou Arreridj",
    "40": "Boumerdes",
    "41": "Chlef",
    "42": "El Bayadh",
    "43": "El Oued",
    "44": "El Tarf",
    "45": "Ghardaia",
    "46": "Illizi",
    "47": "Khenchela",
    "48": "Mila",
    "49": "Naama",
    "50": "Ouargla",
    "51": "Relizane",
    "52": "Souk Ahras",
    "53": "Tamanghasset",
    "54": "Tindouf",
    "55": "Tipaza",
    "56": "Tissemsilt"
  },
  "EC": {
    "1": "Galapagos",
    "2": "Azuay",
    "3": "Bolivar",
    "4": "Canar",
    "5": "Carchi",
    "6": "Chimborazo",
    "7": "Cotopaxi",
    "8": "El Oro",
    "9": "Esmeraldas",
    "10": "Guayas",
    "11": "Imbabura",
    "12": "Loja",
    "13": "Los Rios",
    "14": "Manabi",
    "15": "Morona-Santiago",
    "17": "Pastaza",
    "18": "Pichincha",
    "19": "Tungurahua",
    "20": "Zamora-Chinchipe",
    "22": "Sucumbios",
    "23": "Napo",
    "24": "Orellana"
  },
  "EE": {
    "1": "Harjumaa",
    "2": "Hiiumaa",
    "3": "Ida-Virumaa",
    "4": "Jarvamaa",
    "5": "Jogevamaa",
    "6": "Kohtla-Jarve",
    "7": "Laanemaa",
    "8": "Laane-Virumaa",
    "9": "Narva",
    "10": "Parnu",
    "11": "Parnumaa",
    "12": "Polvamaa",
    "13": "Raplamaa",
    "14": "Saaremaa",
    "15": "Sillamae",
    "16": "Tallinn",
    "17": "Tartu",
    "18": "Tartumaa",
    "19": "Valgamaa",
    "20": "Viljandimaa",
    "21": "Vorumaa"
  },
  "EG": {
    "1": "Ad Daqahliyah",
    "2": "Al Bahr al Ahmar",
    "3": "Al Buhayrah",
    "4": "Al Fayyum",
    "5": "Al Gharbiyah",
    "6": "Al Iskandariyah",
    "7": "Al Isma'iliyah",
    "8": "Al Jizah",
    "9": "Al Minufiyah",
    "10": "Al Minya",
    "11": "Al Qahirah",
    "12": "Al Qalyubiyah",
    "13": "Al Wadi al Jadid",
    "14": "Ash Sharqiyah",
    "15": "As Suways",
    "16": "Aswan",
    "17": "Asyut",
    "18": "Bani Suwayf",
    "19": "Bur Sa'id",
    "20": "Dumyat",
    "21": "Kafr ash Shaykh",
    "22": "Matruh",
    "23": "Qina",
    "24": "Suhaj",
    "26": "Janub Sina'",
    "27": "Shamal Sina'",
    "28": "Al Uqsur"
  },
  "ER": {
    "1": "Anseba",
    "2": "Debub",
    "3": "Debubawi K'eyih Bahri",
    "4": "Gash Barka",
    "5": "Ma'akel",
    "6": "Semenawi K'eyih Bahri"
  },
  "ES": {
    "7": "Islas Baleares",
    "27": "La Rioja",
    "29": "Madrid",
    "31": "Murcia",
    "32": "Navarra",
    "34": "Asturias",
    "39": "Cantabria",
    "51": "Andalucia",
    "52": "Aragon",
    "53": "Canarias",
    "54": "Castilla-La Mancha",
    "55": "Castilla y Leon",
    "56": "Catalonia",
    "57": "Extremadura",
    "58": "Galicia",
    "59": "Pais Vasco",
    "60": "Comunidad Valenciana"
  },
  "ET": {
    "44": "Adis Abeba",
    "45": "Afar",
    "46": "Amara",
    "47": "Binshangul Gumuz",
    "48": "Dire Dawa",
    "49": "Gambela Hizboch",
    "50": "Hareri Hizb",
    "51": "Oromiya",
    "52": "Sumale",
    "53": "Tigray",
    "54": "YeDebub Biheroch Bihereseboch na Hizboch"
  },
  "FI": {
    "1": "Aland",
    "6": "Lapland",
    "8": "Oulu",
    "13": "Southern Finland",
    "14": "Eastern Finland",
    "15": "Western Finland"
  },
  "FJ": {
    "1": "Central",
    "2": "Eastern",
    "3": "Northern",
    "4": "Rotuma",
    "5": "Western"
  },
  "FM": {
    "1": "Kosrae",
    "2": "Pohnpei",
    "3": "Chuuk",
    "4": "Yap"
  },
  "FR": {
    "97": "Aquitaine",
    "98": "Auvergne",
    "99": "Basse-Normandie",
    "832": "Bourgogne",
    "833": "Bretagne",
    "834": "Centre",
    "835": "Champagne-Ardenne",
    "836": "Corse",
    "837": "Franche-Comte",
    "838": "Haute-Normandie",
    "839": "Ile-de-France",
    "840": "Languedoc-Roussillon",
    "875": "Limousin",
    "876": "Lorraine",
    "877": "Midi-Pyrenees",
    "878": "Nord-Pas-de-Calais",
    "879": "Pays de la Loire",
    "880": "Picardie",
    "881": "Poitou-Charentes",
    "882": "Provence-Alpes-Cote d'Azur",
    "883": "Rhone-Alpes",
    "918": "Alsace"
  },
  "GA": {
    "1": "Estuaire",
    "2": "Haut-Ogooue",
    "3": "Moyen-Ogooue",
    "4": "Ngounie",
    "5": "Nyanga",
    "6": "Ogooue-Ivindo",
    "7": "Ogooue-Lolo",
    "8": "Ogooue-Maritime",
    "9": "Woleu-Ntem"
  },
  "GB": {
    "832": "Barking and Dagenham",
    "833": "Barnet",
    "834": "Barnsley",
    "835": "Bath and North East Somerset",
    "836": "Bedfordshire",
    "837": "Bexley",
    "838": "Birmingham",
    "839": "Blackburn with Darwen",
    "840": "Blackpool",
    "875": "Bolton",
    "876": "Bournemouth",
    "877": "Bracknell Forest",
    "878": "Bradford",
    "879": "Brent",
    "880": "Brighton and Hove",
    "881": "Bristol",
    "882": "Bromley",
    "883": "Buckinghamshire",
    "918": "Bury",
    "919": "Calderdale",
    "920": "Cambridgeshire",
    "921": "Camden",
    "922": "Cheshire",
    "923": "Cornwall",
    "924": "Coventry",
    "925": "Croydon",
    "926": "Cumbria",
    "961": "Darlington",
    "962": "Derby",
    "963": "Derbyshire",
    "964": "Devon",
    "965": "Doncaster",
    "966": "Dorset",
    "967": "Dudley",
    "968": "Durham",
    "969": "Ealing",
    "1004": "East Riding of Yorkshire",
    "1005": "East Sussex",
    "1006": "Enfield",
    "1007": "Essex",
    "1008": "Gateshead",
    "1009": "Gloucestershire",
    "1010": "Greenwich",
    "1011": "Hackney",
    "1012": "Halton",
    "1047": "Hammersmith and Fulham",
    "1048": "Hampshire",
    "1049": "Haringey",
    "1050": "Harrow",
    "1051": "Hartlepool",
    "1052": "Havering",
    "1053": "Herefordshire",
    "1054": "Hertford",
    "1055": "Hillingdon",
    "1090": "Hounslow",
    "1091": "Isle of Wight",
    "1092": "Islington",
    "1093": "Kensington and Chelsea",
    "1094": "Kent",
    "1095": "Kingston upon Hull",
    "1096": "Kingston upon Thames",
    "1097": "Kirklees",
    "1098": "Knowsley",
    "1133": "Lambeth",
    "1134": "Lancashire",
    "1135": "Leeds",
    "1136": "Leicester",
    "1137": "Leicestershire",
    "1138": "Lewisham",
    "1139": "Lincolnshire",
    "1140": "Liverpool",
    "1141": "London",
    "1176": "Luton",
    "1177": "Manchester",
    "1178": "Medway",
    "1179": "Merton",
    "1180": "Middlesbrough",
    "1181": "Milton Keynes",
    "1182": "Newcastle upon Tyne",
    "1183": "Newham",
    "1184": "Norfolk",
    "1219": "Northamptonshire",
    "1220": "North East Lincolnshire",
    "1221": "North Lincolnshire",
    "1222": "North Somerset",
    "1223": "North Tyneside",
    "1224": "Northumberland",
    "1225": "North Yorkshire",
    "1226": "Nottingham",
    "1227": "Nottinghamshire",
    "1262": "Oldham",
    "1263": "Oxfordshire",
    "1264": "Peterborough",
    "1265": "Plymouth",
    "1266": "Poole",
    "1267": "Portsmouth",
    "1268": "Reading",
    "1269": "Redbridge",
    "1270": "Redcar and Cleveland",
    "1305": "Richmond upon Thames",
    "1306": "Rochdale",
    "1307": "Rotherham",
    "1308": "Rutland",
    "1309": "Salford",
    "1310": "Shropshire",
    "1311": "Sandwell",
    "1312": "Sefton",
    "1313": "Sheffield",
    "1348": "Slough",
    "1349": "Solihull",
    "1350": "Somerset",
    "1351": "Southampton",
    "1352": "Southend-on-Sea",
    "1353": "South Gloucestershire",
    "1354": "South Tyneside",
    "1355": "Southwark",
    "1356": "Staffordshire",
    "1391": "St. Helens",
    "1392": "Stockport",
    "1393": "Stockton-on-Tees",
    "1394": "Stoke-on-Trent",
    "1395": "Suffolk",
    "1396": "Sunderland",
    "1397": "Surrey",
    "1398": "Sutton",
    "1399": "Swindon",
    "1434": "Tameside",
    "1435": "Telford and Wrekin",
    "1436": "Thurrock",
    "1437": "Torbay",
    "1438": "Tower Hamlets",
    "1439": "Trafford",
    "1440": "Wakefield",
    "1441": "Walsall",
    "1442": "Waltham Forest",
    "1477": "Wandsworth",
    "1478": "Warrington",
    "1479": "Warwickshire",
    "1480": "West Berkshire",
    "1481": "Westminster",
    "1482": "West Sussex",
    "1483": "Wigan",
    "1484": "Wiltshire",
    "1485": "Windsor and Maidenhead",
    "1520": "Wirral",
    "1521": "Wokingham",
    "1522": "Wolverhampton",
    "1523": "Worcestershire",
    "1524": "York",
    "1525": "Antrim",
    "1526": "Ards",
    "1527": "Armagh",
    "1528": "Ballymena",
    "1563": "Ballymoney",
    "1564": "Banbridge",
    "1565": "Belfast",
    "1566": "Carrickfergus",
    "1567": "Castlereagh",
    "1568": "Coleraine",
    "1569": "Cookstown",
    "1570": "Craigavon",
    "1571": "Down",
    "1606": "Dungannon",
    "1607": "Fermanagh",
    "1608": "Larne",
    "1609": "Limavady",
    "1610": "Lisburn",
    "1611": "Derry",
    "1612": "Magherafelt",
    "1613": "Moyle",
    "1614": "Newry and Mourne",
    "1649": "Newtownabbey",
    "1650": "North Down",
    "1651": "Omagh",
    "1652": "Strabane",
    "1653": "Aberdeen City",
    "1654": "Aberdeenshire",
    "1655": "Angus",
    "1656": "Argyll and Bute",
    "1657": "Scottish Borders",
    "1692": "Clackmannanshire",
    "1693": "Dumfries and Galloway",
    "1694": "Dundee City",
    "1695": "East Ayrshire",
    "1696": "East Dunbartonshire",
    "1697": "East Lothian",
    "1698": "East Renfrewshire",
    "1699": "Edinburgh",
    "1700": "Falkirk",
    "1735": "Fife",
    "1736": "Glasgow City",
    "1737": "Highland",
    "1738": "Inverclyde",
    "1739": "Midlothian",
    "1740": "Moray",
    "1741": "North Ayrshire",
    "1742": "North Lanarkshire",
    "1743": "Orkney",
    "1778": "Perth and Kinross",
    "1779": "Renfrewshire",
    "1780": "Shetland Islands",
    "1781": "South Ayrshire",
    "1782": "South Lanarkshire",
    "1783": "Stirling",
    "1784": "West Dunbartonshire",
    "1785": "Eilean Siar",
    "1786": "West Lothian",
    "1821": "Isle of Anglesey",
    "1822": "Blaenau Gwent",
    "1823": "Bridgend",
    "1824": "Caerphilly",
    "1825": "Cardiff",
    "1826": "Ceredigion",
    "1827": "Carmarthenshire",
    "1828": "Conwy",
    "1829": "Denbighshire",
    "1864": "Flintshire",
    "1865": "Gwynedd",
    "1866": "Merthyr Tydfil",
    "1867": "Monmouthshire",
    "1868": "Neath Port Talbot",
    "1869": "Newport",
    "1870": "Pembrokeshire",
    "1871": "Powys",
    "1872": "Rhondda Cynon Taff",
    "1907": "Swansea",
    "1908": "Torfaen",
    "1909": "Vale of Glamorgan",
    "1910": "Wrexham",
    "1911": "Bedfordshire",
    "1912": "Central Bedfordshire",
    "1913": "Cheshire East",
    "1914": "Cheshire West and Chester",
    "1915": "Isles of Scilly"
  },
  "GD": {
    "1": "Saint Andrew",
    "2": "Saint David",
    "3": "Saint George",
    "4": "Saint John",
    "5": "Saint Mark",
    "6": "Saint Patrick"
  },
  "GE": {
    "1": "Abashis Raioni",
    "2": "Abkhazia",
    "3": "Adigenis Raioni",
    "4": "Ajaria",
    "5": "Akhalgoris Raioni",
    "6": "Akhalk'alak'is Raioni",
    "7": "Akhalts'ikhis Raioni",
    "8": "Akhmetis Raioni",
    "9": "Ambrolauris Raioni",
    "10": "Aspindzis Raioni",
    "11": "Baghdat'is Raioni",
    "12": "Bolnisis Raioni",
    "13": "Borjomis Raioni",
    "14": "Chiat'ura",
    "15": "Ch'khorotsqus Raioni",
    "16": "Ch'okhatauris Raioni",
    "17": "Dedop'listsqaros Raioni",
    "18": "Dmanisis Raioni",
    "19": "Dushet'is Raioni",
    "20": "Gardabanis Raioni",
    "21": "Gori",
    "22": "Goris Raioni",
    "23": "Gurjaanis Raioni",
    "24": "Javis Raioni",
    "25": "K'arelis Raioni",
    "26": "Kaspis Raioni",
    "27": "Kharagaulis Raioni",
    "28": "Khashuris Raioni",
    "29": "Khobis Raioni",
    "30": "Khonis Raioni",
    "31": "K'ut'aisi",
    "32": "Lagodekhis Raioni",
    "33": "Lanch'khut'is Raioni",
    "34": "Lentekhis Raioni",
    "35": "Marneulis Raioni",
    "36": "Martvilis Raioni",
    "37": "Mestiis Raioni",
    "38": "Mts'khet'is Raioni",
    "39": "Ninotsmindis Raioni",
    "40": "Onis Raioni",
    "41": "Ozurget'is Raioni",
    "42": "P'ot'i",
    "43": "Qazbegis Raioni",
    "44": "Qvarlis Raioni",
    "45": "Rust'avi",
    "46": "Sach'kheris Raioni",
    "47": "Sagarejos Raioni",
    "48": "Samtrediis Raioni",
    "49": "Senakis Raioni",
    "50": "Sighnaghis Raioni",
    "51": "T'bilisi",
    "52": "T'elavis Raioni",
    "53": "T'erjolis Raioni",
    "54": "T'et'ritsqaros Raioni",
    "55": "T'ianet'is Raioni",
    "56": "Tqibuli",
    "57": "Ts'ageris Raioni",
    "58": "Tsalenjikhis Raioni",
    "59": "Tsalkis Raioni",
    "60": "Tsqaltubo",
    "61": "Vanis Raioni",
    "62": "Zestap'onis Raioni",
    "63": "Zugdidi",
    "64": "Zugdidis Raioni"
  },
  "GH": {
    "1": "Greater Accra",
    "2": "Ashanti",
    "3": "Brong-Ahafo",
    "4": "Central",
    "5": "Eastern",
    "6": "Northern",
    "8": "Volta",
    "9": "Western",
    "10": "Upper East",
    "11": "Upper West"
  },
  "GL": {
    "1": "Nordgronland",
    "2": "Ostgronland",
    "3": "Vestgronland"
  },
  "GM": {
    "1": "Banjul",
    "2": "Lower River",
    "3": "Central River",
    "4": "Upper River",
    "5": "Western",
    "7": "North Bank"
  },
  "GN": {
    "1": "Beyla",
    "2": "Boffa",
    "3": "Boke",
    "4": "Conakry",
    "5": "Dabola",
    "6": "Dalaba",
    "7": "Dinguiraye",
    "9": "Faranah",
    "10": "Forecariah",
    "11": "Fria",
    "12": "Gaoual",
    "13": "Gueckedou",
    "15": "Kerouane",
    "16": "Kindia",
    "17": "Kissidougou",
    "18": "Koundara",
    "19": "Kouroussa",
    "21": "Macenta",
    "22": "Mali",
    "23": "Mamou",
    "25": "Pita",
    "27": "Telimele",
    "28": "Tougue",
    "29": "Yomou",
    "30": "Coyah",
    "31": "Dubreka",
    "32": "Kankan",
    "33": "Koubia",
    "34": "Labe",
    "35": "Lelouma",
    "36": "Lola",
    "37": "Mandiana",
    "38": "Nzerekore",
    "39": "Siguiri"
  },
  "GQ": {
    "3": "Annobon",
    "4": "Bioko Norte",
    "5": "Bioko Sur",
    "6": "Centro Sur",
    "7": "Kie-Ntem",
    "8": "Litoral",
    "9": "Wele-Nzas"
  },
  "GR": {
    "1": "Evros",
    "2": "Rodhopi",
    "3": "Xanthi",
    "4": "Drama",
    "5": "Serrai",
    "6": "Kilkis",
    "7": "Pella",
    "8": "Florina",
    "9": "Kastoria",
    "10": "Grevena",
    "11": "Kozani",
    "12": "Imathia",
    "13": "Thessaloniki",
    "14": "Kavala",
    "15": "Khalkidhiki",
    "16": "Pieria",
    "17": "Ioannina",
    "18": "Thesprotia",
    "19": "Preveza",
    "20": "Arta",
    "21": "Larisa",
    "22": "Trikala",
    "23": "Kardhitsa",
    "24": "Magnisia",
    "25": "Kerkira",
    "26": "Levkas",
    "27": "Kefallinia",
    "28": "Zakinthos",
    "29": "Fthiotis",
    "30": "Evritania",
    "31": "Aitolia kai Akarnania",
    "32": "Fokis",
    "33": "Voiotia",
    "34": "Evvoia",
    "35": "Attiki",
    "36": "Argolis",
    "37": "Korinthia",
    "38": "Akhaia",
    "39": "Ilia",
    "40": "Messinia",
    "41": "Arkadhia",
    "42": "Lakonia",
    "43": "Khania",
    "44": "Rethimni",
    "45": "Iraklion",
    "46": "Lasithi",
    "47": "Dhodhekanisos",
    "48": "Samos",
    "49": "Kikladhes",
    "50": "Khios",
    "51": "Lesvos"
  },
  "GT": {
    "1": "Alta Verapaz",
    "2": "Baja Verapaz",
    "3": "Chimaltenango",
    "4": "Chiquimula",
    "5": "El Progreso",
    "6": "Escuintla",
    "7": "Guatemala",
    "8": "Huehuetenango",
    "9": "Izabal",
    "10": "Jalapa",
    "11": "Jutiapa",
    "12": "Peten",
    "13": "Quetzaltenango",
    "14": "Quiche",
    "15": "Retalhuleu",
    "16": "Sacatepequez",
    "17": "San Marcos",
    "18": "Santa Rosa",
    "19": "Solola",
    "20": "Suchitepequez",
    "21": "Totonicapan",
    "22": "Zacapa"
  },
  "GW": {
    "1": "Bafata",
    "2": "Quinara",
    "4": "Oio",
    "5": "Bolama",
    "6": "Cacheu",
    "7": "Tombali",
    "10": "Gabu",
    "11": "Bissau",
    "12": "Biombo"
  },
  "GY": {
    "10": "Barima-Waini",
    "11": "Cuyuni-Mazaruni",
    "12": "Demerara-Mahaica",
    "13": "East Berbice-Corentyne",
    "14": "Essequibo Islands-West Demerara",
    "15": "Mahaica-Berbice",
    "16": "Pomeroon-Supenaam",
    "17": "Potaro-Siparuni",
    "18": "Upper Demerara-Berbice",
    "19": "Upper Takutu-Upper Essequibo"
  },
  "HN": {
    "1": "Atlantida",
    "2": "Choluteca",
    "3": "Colon",
    "4": "Comayagua",
    "5": "Copan",
    "6": "Cortes",
    "7": "El Paraiso",
    "8": "Francisco Morazan",
    "9": "Gracias a Dios",
    "10": "Intibuca",
    "11": "Islas de la Bahia",
    "12": "La Paz",
    "13": "Lempira",
    "14": "Ocotepeque",
    "15": "Olancho",
    "16": "Santa Barbara",
    "17": "Valle",
    "18": "Yoro"
  },
  "HR": {
    "1": "Bjelovarsko-Bilogorska",
    "2": "Brodsko-Posavska",
    "3": "Dubrovacko-Neretvanska",
    "4": "Istarska",
    "5": "Karlovacka",
    "6": "Koprivnicko-Krizevacka",
    "7": "Krapinsko-Zagorska",
    "8": "Licko-Senjska",
    "9": "Medimurska",
    "10": "Osjecko-Baranjska",
    "11": "Pozesko-Slavonska",
    "12": "Primorsko-Goranska",
    "13": "Sibensko-Kninska",
    "14": "Sisacko-Moslavacka",
    "15": "Splitsko-Dalmatinska",
    "16": "Varazdinska",
    "17": "Viroviticko-Podravska",
    "18": "Vukovarsko-Srijemska",
    "19": "Zadarska",
    "20": "Zagrebacka",
    "21": "Grad Zagreb"
  },
  "HT": {
    "3": "Nord-Ouest",
    "6": "Artibonite",
    "7": "Centre",
    "9": "Nord",
    "10": "Nord-Est",
    "11": "Ouest",
    "12": "Sud",
    "13": "Sud-Est",
    "14": "Grand' Anse",
    "15": "Nippes"
  },
  "HU": {
    "1": "Bacs-Kiskun",
    "2": "Baranya",
    "3": "Bekes",
    "4": "Borsod-Abauj-Zemplen",
    "5": "Budapest",
    "6": "Csongrad",
    "7": "Debrecen",
    "8": "Fejer",
    "9": "Gyor-Moson-Sopron",
    "10": "Hajdu-Bihar",
    "11": "Heves",
    "12": "Komarom-Esztergom",
    "13": "Miskolc",
    "14": "Nograd",
    "15": "Pecs",
    "16": "Pest",
    "17": "Somogy",
    "18": "Szabolcs-Szatmar-Bereg",
    "19": "Szeged",
    "20": "Jasz-Nagykun-Szolnok",
    "21": "Tolna",
    "22": "Vas",
    "23": "Veszprem",
    "24": "Zala",
    "25": "Gyor",
    "26": "Bekescsaba",
    "27": "Dunaujvaros",
    "28": "Eger",
    "29": "Hodmezovasarhely",
    "30": "Kaposvar",
    "31": "Kecskemet",
    "32": "Nagykanizsa",
    "33": "Nyiregyhaza",
    "34": "Sopron",
    "35": "Szekesfehervar",
    "36": "Szolnok",
    "37": "Szombathely",
    "38": "Tatabanya",
    "39": "Veszprem",
    "40": "Zalaegerszeg",
    "41": "Salgotarjan",
    "42": "Szekszard",
    "43": "Erd"
  },
  "ID": {
    "1": "Aceh",
    "2": "Bali",
    "3": "Bengkulu",
    "4": "Jakarta Raya",
    "5": "Jambi",
    "7": "Jawa Tengah",
    "8": "Jawa Timur",
    "10": "Yogyakarta",
    "11": "Kalimantan Barat",
    "12": "Kalimantan Selatan",
    "13": "Kalimantan Tengah",
    "14": "Kalimantan Timur",
    "15": "Lampung",
    "17": "Nusa Tenggara Barat",
    "18": "Nusa Tenggara Timur",
    "21": "Sulawesi Tengah",
    "22": "Sulawesi Tenggara",
    "24": "Sumatera Barat",
    "26": "Sumatera Utara",
    "28": "Maluku",
    "29": "Maluku Utara",
    "30": "Jawa Barat",
    "31": "Sulawesi Utara",
    "32": "Sumatera Selatan",
    "33": "Banten",
    "34": "Gorontalo",
    "35": "Kepulauan Bangka Belitung",
    "36": "Papua",
    "37": "Riau",
    "38": "Sulawesi Selatan",
    "39": "Irian Jaya Barat",
    "40": "Kepulauan Riau",
    "41": "Sulawesi Barat"
  },
  "IE": {
    "1": "Carlow",
    "2": "Cavan",
    "3": "Clare",
    "4": "Cork",
    "6": "Donegal",
    "7": "Dublin",
    "10": "Galway",
    "11": "Kerry",
    "12": "Kildare",
    "13": "Kilkenny",
    "14": "Leitrim",
    "15": "Laois",
    "16": "Limerick",
    "18": "Longford",
    "19": "Louth",
    "20": "Mayo",
    "21": "Meath",
    "22": "Monaghan",
    "23": "Offaly",
    "24": "Roscommon",
    "25": "Sligo",
    "26": "Tipperary",
    "27": "Waterford",
    "29": "Westmeath",
    "30": "Wexford",
    "31": "Wicklow"
  },
  "IL": {
    "1": "HaDarom",
    "2": "HaMerkaz",
    "3": "HaZafon",
    "4": "Hefa",
    "5": "Tel Aviv",
    "6": "Yerushalayim"
  },
  "IN": {
    "1": "Andaman and Nicobar Islands",
    "2": "Andhra Pradesh",
    "3": "Assam",
    "5": "Chandigarh",
    "6": "Dadra and Nagar Haveli",
    "7": "Delhi",
    "9": "Gujarat",
    "10": "Haryana",
    "11": "Himachal Pradesh",
    "12": "Jammu and Kashmir",
    "13": "Kerala",
    "14": "Lakshadweep",
    "16": "Maharashtra",
    "17": "Manipur",
    "18": "Meghalaya",
    "19": "Karnataka",
    "20": "Nagaland",
    "21": "Orissa",
    "22": "Puducherry",
    "23": "Punjab",
    "24": "Rajasthan",
    "25": "Tamil Nadu",
    "26": "Tripura",
    "28": "West Bengal",
    "29": "Sikkim",
    "30": "Arunachal Pradesh",
    "31": "Mizoram",
    "32": "Daman and Diu",
    "33": "Goa",
    "34": "Bihar",
    "35": "Madhya Pradesh",
    "36": "Uttar Pradesh",
    "37": "Chhattisgarh",
    "38": "Jharkhand",
    "39": "Uttarakhand"
  },
  "IQ": {
    "1": "Al Anbar",
    "2": "Al Basrah",
    "3": "Al Muthanna",
    "4": "Al Qadisiyah",
    "5": "As Sulaymaniyah",
    "6": "Babil",
    "7": "Baghdad",
    "8": "Dahuk",
    "9": "Dhi Qar",
    "10": "Diyala",
    "11": "Arbil",
    "12": "Karbala'",
    "13": "At Ta'mim",
    "14": "Maysan",
    "15": "Ninawa",
    "16": "Wasit",
    "17": "An Najaf",
    "18": "Salah ad Din"
  },
  "IR": {
    "1": "Azarbayjan-e Bakhtari",
    "3": "Chahar Mahall va Bakhtiari",
    "4": "Sistan va Baluchestan",
    "5": "Kohkiluyeh va Buyer Ahmadi",
    "7": "Fars",
    "8": "Gilan",
    "9": "Hamadan",
    "10": "Ilam",
    "11": "Hormozgan",
    "12": "Kerman",
    "13": "Bakhtaran",
    "15": "Khuzestan",
    "16": "Kordestan",
    "17": "Mazandaran",
    "18": "Semnan Province",
    "19": "Markazi",
    "21": "Zanjan",
    "22": "Bushehr",
    "23": "Lorestan",
    "24": "Markazi",
    "25": "Semnan",
    "26": "Tehran",
    "27": "Zanjan",
    "28": "Esfahan",
    "29": "Kerman",
    "30": "Khorasan",
    "31": "Yazd",
    "32": "Ardabil",
    "33": "East Azarbaijan",
    "34": "Markazi",
    "35": "Mazandaran",
    "36": "Zanjan",
    "37": "Golestan",
    "38": "Qazvin",
    "39": "Qom",
    "40": "Yazd",
    "41": "Khorasan-e Janubi",
    "42": "Khorasan-e Razavi",
    "43": "Khorasan-e Shemali",
    "44": "Alborz"
  },
  "IS": {
    "3": "Arnessysla",
    "5": "Austur-Hunavatnssysla",
    "6": "Austur-Skaftafellssysla",
    "7": "Borgarfjardarsysla",
    "9": "Eyjafjardarsysla",
    "10": "Gullbringusysla",
    "15": "Kjosarsysla",
    "17": "Myrasysla",
    "20": "Nordur-Mulasysla",
    "21": "Nordur-Tingeyjarsysla",
    "23": "Rangarvallasysla",
    "28": "Skagafjardarsysla",
    "29": "Snafellsnes- og Hnappadalssysla",
    "30": "Strandasysla",
    "31": "Sudur-Mulasysla",
    "32": "Sudur-Tingeyjarsysla",
    "34": "Vestur-Bardastrandarsysla",
    "35": "Vestur-Hunavatnssysla",
    "36": "Vestur-Isafjardarsysla",
    "37": "Vestur-Skaftafellssysla",
    "38": "Austurland",
    "39": "Hofuoborgarsvaoio",
    "40": "Norourland Eystra",
    "41": "Norourland Vestra",
    "42": "Suourland",
    "43": "Suournes",
    "44": "Vestfiroir",
    "45": "Vesturland"
  },
  "IT": {
    "1": "Abruzzi",
    "2": "Basilicata",
    "3": "Calabria",
    "4": "Campania",
    "5": "Emilia-Romagna",
    "6": "Friuli-Venezia Giulia",
    "7": "Lazio",
    "8": "Liguria",
    "9": "Lombardia",
    "10": "Marche",
    "11": "Molise",
    "12": "Piemonte",
    "13": "Puglia",
    "14": "Sardegna",
    "15": "Sicilia",
    "16": "Toscana",
    "17": "Trentino-Alto Adige",
    "18": "Umbria",
    "19": "Valle d'Aosta",
    "20": "Veneto"
  },
  "JM": {
    "1": "Clarendon",
    "2": "Hanover",
    "4": "Manchester",
    "7": "Portland",
    "8": "Saint Andrew",
    "9": "Saint Ann",
    "10": "Saint Catherine",
    "11": "Saint Elizabeth",
    "12": "Saint James",
    "13": "Saint Mary",
    "14": "Saint Thomas",
    "15": "Trelawny",
    "16": "Westmoreland",
    "17": "Kingston"
  },
  "JO": {
    "2": "Al Balqa'",
    "9": "Al Karak",
    "12": "At Tafilah",
    "15": "Al Mafraq",
    "16": "Amman",
    "17": "Az Zaraqa",
    "18": "Irbid",
    "19": "Ma'an",
    "20": "Ajlun",
    "21": "Al Aqabah",
    "22": "Jarash",
    "23": "Madaba"
  },
  "JP": {
    "1": "Aichi",
    "2": "Akita",
    "3": "Aomori",
    "4": "Chiba",
    "5": "Ehime",
    "6": "Fukui",
    "7": "Fukuoka",
    "8": "Fukushima",
    "9": "Gifu",
    "10": "Gumma",
    "11": "Hiroshima",
    "12": "Hokkaido",
    "13": "Hyogo",
    "14": "Ibaraki",
    "15": "Ishikawa",
    "16": "Iwate",
    "17": "Kagawa",
    "18": "Kagoshima",
    "19": "Kanagawa",
    "20": "Kochi",
    "21": "Kumamoto",
    "22": "Kyoto",
    "23": "Mie",
    "24": "Miyagi",
    "25": "Miyazaki",
    "26": "Nagano",
    "27": "Nagasaki",
    "28": "Nara",
    "29": "Niigata",
    "30": "Oita",
    "31": "Okayama",
    "32": "Osaka",
    "33": "Saga",
    "34": "Saitama",
    "35": "Shiga",
    "36": "Shimane",
    "37": "Shizuoka",
    "38": "Tochigi",
    "39": "Tokushima",
    "40": "Tokyo",
    "41": "Tottori",
    "42": "Toyama",
    "43": "Wakayama",
    "44": "Yamagata",
    "45": "Yamaguchi",
    "46": "Yamanashi",
    "47": "Okinawa"
  },
  "KE": {
    "1": "Central",
    "2": "Coast",
    "3": "Eastern",
    "5": "Nairobi Area",
    "6": "North-Eastern",
    "7": "Nyanza",
    "8": "Rift Valley",
    "9": "Western"
  },
  "KG": {
    "1": "Bishkek",
    "2": "Chuy",
    "3": "Jalal-Abad",
    "4": "Naryn",
    "5": "Osh",
    "6": "Talas",
    "7": "Ysyk-Kol",
    "8": "Osh",
    "9": "Batken"
  },
  "KH": {
    "1": "Batdambang",
    "2": "Kampong Cham",
    "3": "Kampong Chhnang",
    "4": "Kampong Speu",
    "5": "Kampong Thum",
    "6": "Kampot",
    "7": "Kandal",
    "8": "Koh Kong",
    "9": "Kracheh",
    "10": "Mondulkiri",
    "11": "Phnum Penh",
    "12": "Pursat",
    "13": "Preah Vihear",
    "14": "Prey Veng",
    "15": "Ratanakiri Kiri",
    "16": "Siem Reap",
    "17": "Stung Treng",
    "18": "Svay Rieng",
    "19": "Takeo",
    "22": "Phnum Penh",
    "23": "Ratanakiri",
    "25": "Banteay Meanchey",
    "28": "Preah Seihanu",
    "29": "Batdambang",
    "30": "Pailin"
  },
  "KI": {
    "1": "Gilbert Islands",
    "2": "Line Islands",
    "3": "Phoenix Islands"
  },
  "KM": {
    "1": "Anjouan",
    "2": "Grande Comore",
    "3": "Moheli"
  },
  "KN": {
    "1": "Christ Church Nichola Town",
    "2": "Saint Anne Sandy Point",
    "3": "Saint George Basseterre",
    "4": "Saint George Gingerland",
    "5": "Saint James Windward",
    "6": "Saint John Capisterre",
    "7": "Saint John Figtree",
    "8": "Saint Mary Cayon",
    "9": "Saint Paul Capisterre",
    "10": "Saint Paul Charlestown",
    "11": "Saint Peter Basseterre",
    "12": "Saint Thomas Lowland",
    "13": "Saint Thomas Middle Island",
    "15": "Trinity Palmetto Point"
  },
  "KP": {
    "1": "Chagang-do",
    "3": "Hamgyong-namdo",
    "6": "Hwanghae-namdo",
    "7": "Hwanghae-bukto",
    "8": "Kaesong-si",
    "9": "Kangwon-do",
    "11": "P'yongan-bukto",
    "12": "P'yongyang-si",
    "13": "Yanggang-do",
    "14": "Namp'o-si",
    "15": "P'yongan-namdo",
    "17": "Hamgyong-bukto",
    "18": "Najin Sonbong-si"
  },
  "KR": {
    "1": "Cheju-do",
    "3": "Cholla-bukto",
    "5": "Ch'ungch'ong-bukto",
    "6": "Kangwon-do",
    "10": "Pusan-jikhalsi",
    "11": "Seoul-t'ukpyolsi",
    "12": "Inch'on-jikhalsi",
    "13": "Kyonggi-do",
    "14": "Kyongsang-bukto",
    "15": "Taegu-jikhalsi",
    "16": "Cholla-namdo",
    "17": "Ch'ungch'ong-namdo",
    "18": "Kwangju-jikhalsi",
    "19": "Taejon-jikhalsi",
    "20": "Kyongsang-namdo",
    "21": "Ulsan-gwangyoksi"
  },
  "KW": {
    "1": "Al Ahmadi",
    "2": "Al Kuwayt",
    "5": "Al Jahra",
    "7": "Al Farwaniyah",
    "8": "Hawalli",
    "9": "Mubarak al Kabir"
  },
  "KY": {
    "1": "Creek",
    "2": "Eastern",
    "3": "Midland",
    "4": "South Town",
    "5": "Spot Bay",
    "6": "Stake Bay",
    "7": "West End",
    "8": "Western"
  },
  "KZ": {
    "1": "Almaty",
    "2": "Almaty City",
    "3": "Aqmola",
    "4": "Aqtobe",
    "5": "Astana",
    "6": "Atyrau",
    "7": "West Kazakhstan",
    "8": "Bayqonyr",
    "9": "Mangghystau",
    "10": "South Kazakhstan",
    "11": "Pavlodar",
    "12": "Qaraghandy",
    "13": "Qostanay",
    "14": "Qyzylorda",
    "15": "East Kazakhstan",
    "16": "North Kazakhstan",
    "17": "Zhambyl"
  },
  "LA": {
    "1": "Attapu",
    "2": "Champasak",
    "3": "Houaphan",
    "4": "Khammouan",
    "5": "Louang Namtha",
    "7": "Oudomxai",
    "8": "Phongsali",
    "9": "Saravan",
    "10": "Savannakhet",
    "11": "Vientiane",
    "13": "Xaignabouri",
    "14": "Xiangkhoang",
    "17": "Louangphrabang"
  },
  "LB": {
    "1": "Beqaa",
    "2": "Al Janub",
    "3": "Liban-Nord",
    "4": "Beyrouth",
    "5": "Mont-Liban",
    "6": "Liban-Sud",
    "7": "Nabatiye",
    "8": "Beqaa",
    "9": "Liban-Nord",
    "10": "Aakk",
    "11": "Baalbek-Hermel"
  },
  "LC": {
    "1": "Anse-la-Raye",
    "2": "Dauphin",
    "3": "Castries",
    "4": "Choiseul",
    "5": "Dennery",
    "6": "Gros-Islet",
    "7": "Laborie",
    "8": "Micoud",
    "9": "Soufriere",
    "10": "Vieux-Fort",
    "11": "Praslin"
  },
  "LI": {
    "1": "Balzers",
    "2": "Eschen",
    "3": "Gamprin",
    "4": "Mauren",
    "5": "Planken",
    "6": "Ruggell",
    "7": "Schaan",
    "8": "Schellenberg",
    "9": "Triesen",
    "10": "Triesenberg",
    "11": "Vaduz",
    "21": "Gbarpolu",
    "22": "River Gee"
  },
  "LK": {
    "29": "Central",
    "30": "North Central",
    "32": "North Western",
    "33": "Sabaragamuwa",
    "34": "Southern",
    "35": "Uva",
    "36": "Western",
    "37": "Eastern",
    "38": "Northern"
  },
  "LR": {
    "1": "Bong",
    "4": "Grand Cape Mount",
    "5": "Lofa",
    "6": "Maryland",
    "7": "Monrovia",
    "9": "Nimba",
    "10": "Sino",
    "11": "Grand Bassa",
    "12": "Grand Cape Mount",
    "13": "Maryland",
    "14": "Montserrado",
    "17": "Margibi",
    "18": "River Cess",
    "19": "Grand Gedeh",
    "20": "Lofa",
    "21": "Gbarpolu",
    "22": "River Gee"
  },
  "LS": {
    "10": "Berea",
    "11": "Butha-Buthe",
    "12": "Leribe",
    "13": "Mafeteng",
    "14": "Maseru",
    "15": "Mohales Hoek",
    "16": "Mokhotlong",
    "17": "Qachas Nek",
    "18": "Quthing",
    "19": "Thaba-Tseka"
  },
  "LT": {
    "56": "Alytaus Apskritis",
    "57": "Kauno Apskritis",
    "58": "Klaipedos Apskritis",
    "59": "Marijampoles Apskritis",
    "60": "Panevezio Apskritis",
    "61": "Siauliu Apskritis",
    "62": "Taurages Apskritis",
    "63": "Telsiu Apskritis",
    "64": "Utenos Apskritis",
    "65": "Vilniaus Apskritis"
  },
  "LU": {
    "1": "Diekirch",
    "2": "Grevenmacher",
    "3": "Luxembourg"
  },
  "LV": {
    "1": "Aizkraukles",
    "2": "Aluksnes",
    "3": "Balvu",
    "4": "Bauskas",
    "5": "Cesu",
    "6": "Daugavpils",
    "7": "Daugavpils",
    "8": "Dobeles",
    "9": "Gulbenes",
    "10": "Jekabpils",
    "11": "Jelgava",
    "12": "Jelgavas",
    "13": "Jurmala",
    "14": "Kraslavas",
    "15": "Kuldigas",
    "16": "Liepaja",
    "17": "Liepajas",
    "18": "Limbazu",
    "19": "Ludzas",
    "20": "Madonas",
    "21": "Ogres",
    "22": "Preilu",
    "23": "Rezekne",
    "24": "Rezeknes",
    "25": "Riga",
    "26": "Rigas",
    "27": "Saldus",
    "28": "Talsu",
    "29": "Tukuma",
    "30": "Valkas",
    "31": "Valmieras",
    "32": "Ventspils",
    "33": "Ventspils"
  },
  "LY": {
    "3": "Al Aziziyah",
    "5": "Al Jufrah",
    "8": "Al Kufrah",
    "13": "Ash Shati'",
    "30": "Murzuq",
    "34": "Sabha",
    "41": "Tarhunah",
    "42": "Tubruq",
    "45": "Zlitan",
    "47": "Ajdabiya",
    "48": "Al Fatih",
    "49": "Al Jabal al Akhdar",
    "50": "Al Khums",
    "51": "An Nuqat al Khams",
    "52": "Awbari",
    "53": "Az Zawiyah",
    "54": "Banghazi",
    "55": "Darnah",
    "56": "Ghadamis",
    "57": "Gharyan",
    "58": "Misratah",
    "59": "Sawfajjin",
    "60": "Surt",
    "61": "Tarabulus",
    "62": "Yafran"
  },
  "MA": {
    "45": "Grand Casablanca",
    "46": "Fes-Boulemane",
    "47": "Marrakech-Tensift-Al Haouz",
    "48": "Meknes-Tafilalet",
    "49": "Rabat-Sale-Zemmour-Zaer",
    "50": "Chaouia-Ouardigha",
    "51": "Doukkala-Abda",
    "52": "Gharb-Chrarda-Beni Hssen",
    "53": "Guelmim-Es Smara",
    "54": "Oriental",
    "55": "Souss-Massa-Dr",
    "56": "Tadla-Azilal",
    "57": "Tanger-Tetouan",
    "58": "Taza-Al Hoceima-Taounate",
    "59": "La"
  },
  "MC": {
    "1": "La Condamine",
    "2": "Monaco",
    "3": "Monte-Carlo"
  },
  "MD": {
    "51": "Gagauzia",
    "57": "Chisinau",
    "58": "Stinga Nistrului",
    "59": "Anenii Noi",
    "60": "Balti",
    "61": "Basarabeasca",
    "62": "Bender",
    "63": "Briceni",
    "64": "Cahul",
    "65": "Cantemir",
    "66": "Calarasi",
    "67": "Causeni",
    "68": "Cimislia",
    "69": "Criuleni",
    "70": "Donduseni",
    "71": "Drochia",
    "72": "Dubasari",
    "73": "Edinet",
    "74": "Falesti",
    "75": "Floresti",
    "76": "Glodeni",
    "77": "Hincesti",
    "78": "Ialoveni",
    "79": "Leova",
    "80": "Nisporeni",
    "81": "Ocnita",
    "82": "Orhei",
    "83": "Rezina",
    "84": "Riscani",
    "85": "Singerei",
    "86": "Soldanesti",
    "87": "Soroca",
    "88": "Stefan-Voda",
    "89": "Straseni",
    "90": "Taraclia",
    "91": "Telenesti",
    "92": "Ungheni"
  },
  "MG": {
    "1": "Antsiranana",
    "2": "Fianarantsoa",
    "3": "Mahajanga",
    "4": "Toamasina",
    "5": "Antananarivo",
    "6": "Toliara"
  },
  "MK": {
    "1": "Aracinovo",
    "2": "Bac",
    "3": "Belcista",
    "4": "Berovo",
    "5": "Bistrica",
    "6": "Bitola",
    "7": "Blatec",
    "8": "Bogdanci",
    "9": "Bogomila",
    "10": "Bogovinje",
    "11": "Bosilovo",
    "12": "Brvenica",
    "13": "Cair",
    "14": "Capari",
    "15": "Caska",
    "16": "Cegrane",
    "17": "Centar",
    "18": "Centar Zupa",
    "19": "Cesinovo",
    "20": "Cucer-Sandevo",
    "21": "Debar",
    "22": "Delcevo",
    "23": "Delogozdi",
    "24": "Demir Hisar",
    "25": "Demir Kapija",
    "26": "Dobrusevo",
    "27": "Dolna Banjica",
    "28": "Dolneni",
    "29": "Dorce Petrov",
    "30": "Drugovo",
    "31": "Dzepciste",
    "32": "Gazi Baba",
    "33": "Gevgelija",
    "34": "Gostivar",
    "35": "Gradsko",
    "36": "Ilinden",
    "37": "Izvor",
    "38": "Jegunovce",
    "39": "Kamenjane",
    "40": "Karbinci",
    "41": "Karpos",
    "42": "Kavadarci",
    "43": "Kicevo",
    "44": "Kisela Voda",
    "45": "Klecevce",
    "46": "Kocani",
    "47": "Konce",
    "48": "Kondovo",
    "49": "Konopiste",
    "50": "Kosel",
    "51": "Kratovo",
    "52": "Kriva Palanka",
    "53": "Krivogastani",
    "54": "Krusevo",
    "55": "Kuklis",
    "56": "Kukurecani",
    "57": "Kumanovo",
    "58": "Labunista",
    "59": "Lipkovo",
    "60": "Lozovo",
    "61": "Lukovo",
    "62": "Makedonska Kamenica",
    "63": "Makedonski Brod",
    "64": "Mavrovi Anovi",
    "65": "Meseista",
    "66": "Miravci",
    "67": "Mogila",
    "68": "Murtino",
    "69": "Negotino",
    "70": "Negotino-Polosko",
    "71": "Novaci",
    "72": "Novo Selo",
    "73": "Oblesevo",
    "74": "Ohrid",
    "75": "Orasac",
    "76": "Orizari",
    "77": "Oslomej",
    "78": "Pehcevo",
    "79": "Petrovec",
    "80": "Plasnica",
    "81": "Podares",
    "82": "Prilep",
    "83": "Probistip",
    "84": "Radovis",
    "85": "Rankovce",
    "86": "Resen",
    "87": "Rosoman",
    "88": "Rostusa",
    "89": "Samokov",
    "90": "Saraj",
    "91": "Sipkovica",
    "92": "Sopiste",
    "93": "Sopotnica",
    "94": "Srbinovo",
    "95": "Staravina",
    "96": "Star Dojran",
    "97": "Staro Nagoricane",
    "98": "Stip",
    "99": "Struga",
    "832": "Strumica",
    "833": "Studenicani",
    "834": "Suto Orizari",
    "835": "Sveti Nikole",
    "836": "Tearce",
    "837": "Tetovo",
    "838": "Topolcani",
    "839": "Valandovo",
    "840": "Vasilevo",
    "875": "Veles",
    "876": "Velesta",
    "877": "Vevcani",
    "878": "Vinica",
    "879": "Vitoliste",
    "880": "Vranestica",
    "881": "Vrapciste",
    "882": "Vratnica",
    "883": "Vrutok",
    "918": "Zajas",
    "919": "Zelenikovo",
    "920": "Zelino",
    "921": "Zitose",
    "922": "Zletovo",
    "923": "Zrnovci",
    "925": "Cair",
    "926": "Caska",
    "962": "Debar",
    "963": "Demir Hisar",
    "964": "Gostivar",
    "966": "Kavadarci",
    "967": "Kumanovo",
    "968": "Makedonski Brod",
    "1005": "Ohrid",
    "1006": "Prilep",
    "1008": "Dojran",
    "1009": "Struga",
    "1010": "Strumica",
    "1011": "Tetovo",
    "1012": "Valandovo",
    "1047": "Veles",
    "1048": "Aerodrom"
  },
  "ML": {
    "1": "Bamako",
    "3": "Kayes",
    "4": "Mopti",
    "5": "Segou",
    "6": "Sikasso",
    "7": "Koulikoro",
    "8": "Tombouctou",
    "9": "Gao",
    "10": "Kidal"
  },
  "MM": {
    "1": "Rakhine State",
    "2": "Chin State",
    "3": "Irrawaddy",
    "4": "Kachin State",
    "5": "Karan State",
    "6": "Kayah State",
    "7": "Magwe",
    "8": "Mandalay",
    "9": "Pegu",
    "10": "Sagaing",
    "11": "Shan State",
    "12": "Tenasserim",
    "13": "Mon State",
    "14": "Rangoon",
    "17": "Yangon"
  },
  "MN": {
    "1": "Arhangay",
    "2": "Bayanhongor",
    "3": "Bayan-Olgiy",
    "5": "Darhan",
    "6": "Dornod",
    "7": "Dornogovi",
    "8": "Dundgovi",
    "9": "Dzavhan",
    "10": "Govi-Altay",
    "11": "Hentiy",
    "12": "Hovd",
    "13": "Hovsgol",
    "14": "Omnogovi",
    "15": "Ovorhangay",
    "16": "Selenge",
    "17": "Suhbaatar",
    "18": "Tov",
    "19": "Uvs",
    "20": "Ulaanbaatar",
    "21": "Bulgan",
    "22": "Erdenet",
    "23": "Darhan-Uul",
    "24": "Govisumber",
    "25": "Orhon"
  },
  "MO": {
    "1": "Ilhas",
    "2": "Macau"
  },
  "MR": {
    "1": "Hodh Ech Chargui",
    "2": "Hodh El Gharbi",
    "3": "Assaba",
    "4": "Gorgol",
    "5": "Brakna",
    "6": "Trarza",
    "7": "Adrar",
    "8": "Dakhlet Nouadhibou",
    "9": "Tagant",
    "10": "Guidimaka",
    "11": "Tiris Zemmour",
    "12": "Inchiri"
  },
  "MS": {
    "1": "Saint Anthony",
    "2": "Saint Georges",
    "3": "Saint Peter"
  },
  "MU": {
    "12": "Black River",
    "13": "Flacq",
    "14": "Grand Port",
    "15": "Moka",
    "16": "Pamplemousses",
    "17": "Plaines Wilhems",
    "18": "Port Louis",
    "19": "Riviere du Rempart",
    "20": "Savanne",
    "21": "Agalega Islands",
    "22": "Cargados Carajos",
    "23": "Rodrigues"
  },
  "MV": {
    "1": "Seenu",
    "5": "Laamu",
    "30": "Alifu",
    "31": "Baa",
    "32": "Dhaalu",
    "33": "Faafu ",
    "34": "Gaafu Alifu",
    "35": "Gaafu Dhaalu",
    "36": "Haa Alifu",
    "37": "Haa Dhaalu",
    "38": "Kaafu",
    "39": "Lhaviyani",
    "40": "Maale",
    "41": "Meemu",
    "42": "Gnaviyani",
    "43": "Noonu",
    "44": "Raa",
    "45": "Shaviyani",
    "46": "Thaa",
    "47": "Vaavu"
  },
  "MW": {
    "2": "Chikwawa",
    "3": "Chiradzulu",
    "4": "Chitipa",
    "5": "Thyolo",
    "6": "Dedza",
    "7": "Dowa",
    "8": "Karonga",
    "9": "Kasungu",
    "11": "Lilongwe",
    "12": "Mangochi",
    "13": "Mchinji",
    "15": "Mzimba",
    "16": "Ntcheu",
    "17": "Nkhata Bay",
    "18": "Nkhotakota",
    "19": "Nsanje",
    "20": "Ntchisi",
    "21": "Rumphi",
    "22": "Salima",
    "23": "Zomba",
    "24": "Blantyre",
    "25": "Mwanza",
    "26": "Balaka",
    "27": "Likoma",
    "28": "Machinga",
    "29": "Mulanje",
    "30": "Phalombe"
  },
  "MX": {
    "1": "Aguascalientes",
    "2": "Baja California",
    "3": "Baja California Sur",
    "4": "Campeche",
    "5": "Chiapas",
    "6": "Chihuahua",
    "7": "Coahuila de Zaragoza",
    "8": "Colima",
    "9": "Distrito Federal",
    "10": "Durango",
    "11": "Guanajuato",
    "12": "Guerrero",
    "13": "Hidalgo",
    "14": "Jalisco",
    "15": "Mexico",
    "16": "Michoacan de Ocampo",
    "17": "Morelos",
    "18": "Nayarit",
    "19": "Nuevo Leon",
    "20": "Oaxaca",
    "21": "Puebla",
    "22": "Queretaro de Arteaga",
    "23": "Quintana Roo",
    "24": "San Luis Potosi",
    "25": "Sinaloa",
    "26": "Sonora",
    "27": "Tabasco",
    "28": "Tamaulipas",
    "29": "Tlaxcala",
    "30": "Veracruz-Llave",
    "31": "Yucatan",
    "32": "Zacatecas"
  },
  "MY": {
    "1": "Johor",
    "2": "Kedah",
    "3": "Kelantan",
    "4": "Melaka",
    "5": "Negeri Sembilan",
    "6": "Pahang",
    "7": "Perak",
    "8": "Perlis",
    "9": "Pulau Pinang",
    "11": "Sarawak",
    "12": "Selangor",
    "13": "Terengganu",
    "14": "Kuala Lumpur",
    "15": "Labuan",
    "16": "Sabah",
    "17": "Putrajaya"
  },
  "MZ": {
    "1": "Cabo Delgado",
    "2": "Gaza",
    "3": "Inhambane",
    "4": "Maputo",
    "5": "Sofala",
    "6": "Nampula",
    "7": "Niassa",
    "8": "Tete",
    "9": "Zambezia",
    "10": "Manica",
    "11": "Maputo"
  },
  "NA": {
    "1": "Bethanien",
    "2": "Caprivi Oos",
    "3": "Boesmanland",
    "4": "Gobabis",
    "5": "Grootfontein",
    "6": "Kaokoland",
    "7": "Karibib",
    "8": "Keetmanshoop",
    "9": "Luderitz",
    "10": "Maltahohe",
    "11": "Okahandja",
    "12": "Omaruru",
    "13": "Otjiwarongo",
    "14": "Outjo",
    "15": "Owambo",
    "16": "Rehoboth",
    "17": "Swakopmund",
    "18": "Tsumeb",
    "20": "Karasburg",
    "21": "Windhoek",
    "22": "Damaraland",
    "23": "Hereroland Oos",
    "24": "Hereroland Wes",
    "25": "Kavango",
    "26": "Mariental",
    "27": "Namaland",
    "28": "Caprivi",
    "29": "Erongo",
    "30": "Hardap",
    "31": "Karas",
    "32": "Kunene",
    "33": "Ohangwena",
    "34": "Okavango",
    "35": "Omaheke",
    "36": "Omusati",
    "37": "Oshana",
    "38": "Oshikoto",
    "39": "Otjozondjupa"
  },
  "NE": {
    "1": "Agadez",
    "2": "Diffa",
    "3": "Dosso",
    "4": "Maradi",
    "5": "Niamey",
    "6": "Tahoua",
    "7": "Zinder",
    "8": "Niamey"
  },
  "NG": {
    "5": "Lagos",
    "11": "Federal Capital Territory",
    "16": "Ogun",
    "21": "Akwa Ibom",
    "22": "Cross River",
    "23": "Kaduna",
    "24": "Katsina",
    "25": "Anambra",
    "26": "Benue",
    "27": "Borno",
    "28": "Imo",
    "29": "Kano",
    "30": "Kwara",
    "31": "Niger",
    "32": "Oyo",
    "35": "Adamawa",
    "36": "Delta",
    "37": "Edo",
    "39": "Jigawa",
    "40": "Kebbi",
    "41": "Kogi",
    "42": "Osun",
    "43": "Taraba",
    "44": "Yobe",
    "45": "Abia",
    "46": "Bauchi",
    "47": "Enugu",
    "48": "Ondo",
    "49": "Plateau",
    "50": "Rivers",
    "51": "Sokoto",
    "52": "Bayelsa",
    "53": "Ebonyi",
    "54": "Ekiti",
    "55": "Gombe",
    "56": "Nassarawa",
    "57": "Zamfara"
  },
  "NI": {
    "1": "Boaco",
    "2": "Carazo",
    "3": "Chinandega",
    "4": "Chontales",
    "5": "Esteli",
    "6": "Granada",
    "7": "Jinotega",
    "8": "Leon",
    "9": "Madriz",
    "10": "Managua",
    "11": "Masaya",
    "12": "Matagalpa",
    "13": "Nueva Segovia",
    "14": "Rio San Juan",
    "15": "Rivas",
    "16": "Zelaya",
    "17": "Autonoma Atlantico Norte",
    "18": "Region Autonoma Atlantico Sur"
  },
  "NL": {
    "1": "Drenthe",
    "2": "Friesland",
    "3": "Gelderland",
    "4": "Groningen",
    "5": "Limburg",
    "6": "Noord-Brabant",
    "7": "Noord-Holland",
    "9": "Utrecht",
    "10": "Zeeland",
    "11": "Zuid-Holland",
    "15": "Overijssel",
    "16": "Flevoland"
  },
  "NO": {
    "1": "Akershus",
    "2": "Aust-Agder",
    "4": "Buskerud",
    "5": "Finnmark",
    "6": "Hedmark",
    "7": "Hordaland",
    "8": "More og Romsdal",
    "9": "Nordland",
    "10": "Nord-Trondelag",
    "11": "Oppland",
    "12": "Oslo",
    "13": "Ostfold",
    "14": "Rogaland",
    "15": "Sogn og Fjordane",
    "16": "Sor-Trondelag",
    "17": "Telemark",
    "18": "Troms",
    "19": "Vest-Agder",
    "20": "Vestfold"
  },
  "NP": {
    "1": "Bagmati",
    "2": "Bheri",
    "3": "Dhawalagiri",
    "4": "Gandaki",
    "5": "Janakpur",
    "6": "Karnali",
    "7": "Kosi",
    "8": "Lumbini",
    "9": "Mahakali",
    "10": "Mechi",
    "11": "Narayani",
    "12": "Rapti",
    "13": "Sagarmatha",
    "14": "Seti"
  },
  "NR": {
    "1": "Aiwo",
    "2": "Anabar",
    "3": "Anetan",
    "4": "Anibare",
    "5": "Baiti",
    "6": "Boe",
    "7": "Buada",
    "8": "Denigomodu",
    "9": "Ewa",
    "10": "Ijuw",
    "11": "Meneng",
    "12": "Nibok",
    "13": "Uaboe",
    "14": "Yaren"
  },
  "NZ": {
    "10": "Chatham Islands",
    "1010": "Auckland",
    "1011": "Bay of Plenty",
    "1012": "Canterbury",
    "1047": "Gisborne",
    "1048": "Hawke's Bay",
    "1049": "Manawatu-Wanganui",
    "1050": "Marlborough",
    "1051": "Nelson",
    "1052": "Northland",
    "1053": "Otago",
    "1054": "Southland",
    "1055": "Taranaki",
    "1090": "Waikato",
    "1091": "Wellington",
    "1092": "West Coast"
  },
  "OM": {
    "1": "Ad Dakhiliyah",
    "2": "Al Batinah",
    "3": "Al Wusta",
    "4": "Ash Sharqiyah",
    "5": "Az Zahirah",
    "6": "Masqat",
    "7": "Musandam",
    "8": "Zufar"
  },
  "PA": {
    "1": "Bocas del Toro",
    "2": "Chiriqui",
    "3": "Cocle",
    "4": "Colon",
    "5": "Darien",
    "6": "Herrera",
    "7": "Los Santos",
    "8": "Panama",
    "9": "San Blas",
    "10": "Veraguas"
  },
  "PE": {
    "1": "Amazonas",
    "2": "Ancash",
    "3": "Apurimac",
    "4": "Arequipa",
    "5": "Ayacucho",
    "6": "Cajamarca",
    "7": "Callao",
    "8": "Cusco",
    "9": "Huancavelica",
    "10": "Huanuco",
    "11": "Ica",
    "12": "Junin",
    "13": "La Libertad",
    "14": "Lambayeque",
    "15": "Lima",
    "16": "Loreto",
    "17": "Madre de Dios",
    "18": "Moquegua",
    "19": "Pasco",
    "20": "Piura",
    "21": "Puno",
    "22": "San Martin",
    "23": "Tacna",
    "24": "Tumbes",
    "25": "Ucayali"
  },
  "PG": {
    "1": "Central",
    "2": "Gulf",
    "3": "Milne Bay",
    "4": "Northern",
    "5": "Southern Highlands",
    "6": "Western",
    "7": "North Solomons",
    "8": "Chimbu",
    "9": "Eastern Highlands",
    "10": "East New Britain",
    "11": "East Sepik",
    "12": "Madang",
    "13": "Manus",
    "14": "Morobe",
    "15": "New Ireland",
    "16": "Western Highlands",
    "17": "West New Britain",
    "18": "Sandaun",
    "19": "Enga",
    "20": "National Capital"
  },
  "PH": {
    "1": "Abra",
    "2": "Agusan del Norte",
    "3": "Agusan del Sur",
    "4": "Aklan",
    "5": "Albay",
    "6": "Antique",
    "7": "Bataan",
    "8": "Batanes",
    "9": "Batangas",
    "10": "Benguet",
    "11": "Bohol",
    "12": "Bukidnon",
    "13": "Bulacan",
    "14": "Cagayan",
    "15": "Camarines Norte",
    "16": "Camarines Sur",
    "17": "Camiguin",
    "18": "Capiz",
    "19": "Catanduanes",
    "20": "Cavite",
    "21": "Cebu",
    "22": "Basilan",
    "23": "Eastern Samar",
    "24": "Davao",
    "25": "Davao del Sur",
    "26": "Davao Oriental",
    "27": "Ifugao",
    "28": "Ilocos Norte",
    "29": "Ilocos Sur",
    "30": "Iloilo",
    "31": "Isabela",
    "32": "Kalinga-Apayao",
    "33": "Laguna",
    "34": "Lanao del Norte",
    "35": "Lanao del Sur",
    "36": "La Union",
    "37": "Leyte",
    "38": "Marinduque",
    "39": "Masbate",
    "40": "Mindoro Occidental",
    "41": "Mindoro Oriental",
    "42": "Misamis Occidental",
    "43": "Misamis Oriental",
    "44": "Mountain",
    "45": "Negros Occidental",
    "46": "Negros Oriental",
    "47": "Nueva Ecija",
    "48": "Nueva Vizcaya",
    "49": "Palawan",
    "50": "Pampanga",
    "51": "Pangasinan",
    "53": "Rizal",
    "54": "Romblon",
    "55": "Samar",
    "56": "Maguindanao",
    "57": "North Cotabato",
    "58": "Sorsogon",
    "59": "Southern Leyte",
    "60": "Sulu",
    "61": "Surigao del Norte",
    "62": "Surigao del Sur",
    "63": "Tarlac",
    "64": "Zambales",
    "65": "Zamboanga del Norte",
    "66": "Zamboanga del Sur",
    "67": "Northern Samar",
    "68": "Quirino",
    "69": "Siquijor",
    "70": "South Cotabato",
    "71": "Sultan Kudarat",
    "72": "Tawitawi",
    "832": "Angeles",
    "833": "Bacolod",
    "834": "Bago",
    "835": "Baguio",
    "836": "Bais",
    "837": "Basilan City",
    "838": "Batangas City",
    "839": "Butuan",
    "840": "Cabanatuan",
    "875": "Cadiz",
    "876": "Cagayan de Oro",
    "877": "Calbayog",
    "878": "Caloocan",
    "879": "Canlaon",
    "880": "Cavite City",
    "881": "Cebu City",
    "882": "Cotabato",
    "883": "Dagupan",
    "918": "Danao",
    "919": "Dapitan",
    "920": "Davao City",
    "921": "Dipolog",
    "922": "Dumaguete",
    "923": "General Santos",
    "924": "Gingoog",
    "925": "Iligan",
    "926": "Iloilo City",
    "961": "Iriga",
    "962": "La Carlota",
    "963": "Laoag",
    "964": "Lapu-Lapu",
    "965": "Legaspi",
    "966": "Lipa",
    "967": "Lucena",
    "968": "Mandaue",
    "969": "Manila",
    "1004": "Marawi",
    "1005": "Naga",
    "1006": "Olongapo",
    "1007": "Ormoc",
    "1008": "Oroquieta",
    "1009": "Ozamis",
    "1010": "Pagadian",
    "1011": "Palayan",
    "1012": "Pasay",
    "1047": "Puerto Princesa",
    "1048": "Quezon City",
    "1049": "Roxas",
    "1050": "San Carlos",
    "1051": "San Carlos",
    "1052": "San Jose",
    "1053": "San Pablo",
    "1054": "Silay",
    "1055": "Surigao",
    "1090": "Tacloban",
    "1091": "Tagaytay",
    "1092": "Tagbilaran",
    "1093": "Tangub",
    "1094": "Toledo",
    "1095": "Trece Martires",
    "1096": "Zamboanga",
    "1097": "Aurora",
    "1134": "Quezon",
    "1135": "Negros Occidental",
    "1141": "Biliran",
    "1181": "Compostela Valley",
    "1182": "Davao del Norte",
    "1221": "Guimaras",
    "1222": "Himamaylan",
    "1225": "Kalinga",
    "1262": "Las Pinas",
    "1266": "Malabon",
    "1267": "Malaybalay",
    "1308": "Muntinlupa",
    "1309": "Navotas",
    "1311": "Paranaque",
    "1313": "Passi",
    "1477": "Zambales",
    "1352": "San Jose del Monte",
    "1353": "San Juan",
    "1355": "Santiago",
    "1356": "Sarangani",
    "1391": "Sipalay",
    "1393": "Surigao del Norte",
    "1478": "Zamboanga"
  },
  "PK": {
    "1": "Federally Administered Tribal Areas",
    "2": "Balochistan",
    "3": "North-West Frontier",
    "4": "Punjab",
    "5": "Sindh",
    "6": "Azad Kashmir",
    "7": "Northern Areas",
    "8": "Islamabad"
  },
  "PL": {
    "72": "Dolnoslaskie",
    "73": "Kujawsko-Pomorskie",
    "74": "Lodzkie",
    "75": "Lubelskie",
    "76": "Lubuskie",
    "77": "Malopolskie",
    "78": "Mazowieckie",
    "79": "Opolskie",
    "80": "Podkarpackie",
    "81": "Podlaskie",
    "82": "Pomorskie",
    "83": "Slaskie",
    "84": "Swietokrzyskie",
    "85": "Warminsko-Mazurskie",
    "86": "Wielkopolskie",
    "87": "Zachodniopomorskie"
  },
  "PS": {
    "1131": "Gaza",
    "1798": "West Bank"
  },
  "PT": {
    "2": "Aveiro",
    "3": "Beja",
    "4": "Braga",
    "5": "Braganca",
    "6": "Castelo Branco",
    "7": "Coimbra",
    "8": "Evora",
    "9": "Faro",
    "10": "Madeira",
    "11": "Guarda",
    "13": "Leiria",
    "14": "Lisboa",
    "16": "Portalegre",
    "17": "Porto",
    "18": "Santarem",
    "19": "Setubal",
    "20": "Viana do Castelo",
    "21": "Vila Real",
    "22": "Viseu",
    "23": "Azores"
  },
  "PY": {
    "1": "Alto Parana",
    "2": "Amambay",
    "4": "Caaguazu",
    "5": "Caazapa",
    "6": "Central",
    "7": "Concepcion",
    "8": "Cordillera",
    "10": "Guaira",
    "11": "Itapua",
    "12": "Misiones",
    "13": "Neembucu",
    "15": "Paraguari",
    "16": "Presidente Hayes",
    "17": "San Pedro",
    "19": "Canindeyu",
    "22": "Asuncion",
    "23": "Alto Paraguay",
    "24": "Boqueron"
  },
  "QA": {
    "1": "Ad Dawhah",
    "2": "Al Ghuwariyah",
    "3": "Al Jumaliyah",
    "4": "Al Khawr",
    "5": "Al Wakrah Municipality",
    "6": "Ar Rayyan",
    "8": "Madinat ach Shamal",
    "9": "Umm Salal",
    "10": "Al Wakrah",
    "11": "Jariyan al Batnah",
    "12": "Umm Sa'id"
  },
  "RO": {
    "1": "Alba",
    "2": "Arad",
    "3": "Arges",
    "4": "Bacau",
    "5": "Bihor",
    "6": "Bistrita-Nasaud",
    "7": "Botosani",
    "8": "Braila",
    "9": "Brasov",
    "10": "Bucuresti",
    "11": "Buzau",
    "12": "Caras-Severin",
    "13": "Cluj",
    "14": "Constanta",
    "15": "Covasna",
    "16": "Dambovita",
    "17": "Dolj",
    "18": "Galati",
    "19": "Gorj",
    "20": "Harghita",
    "21": "Hunedoara",
    "22": "Ialomita",
    "23": "Iasi",
    "25": "Maramures",
    "26": "Mehedinti",
    "27": "Mures",
    "28": "Neamt",
    "29": "Olt",
    "30": "Prahova",
    "31": "Salaj",
    "32": "Satu Mare",
    "33": "Sibiu",
    "34": "Suceava",
    "35": "Teleorman",
    "36": "Timis",
    "37": "Tulcea",
    "38": "Vaslui",
    "39": "Valcea",
    "40": "Vrancea",
    "41": "Calarasi",
    "42": "Giurgiu",
    "43": "Ilfov"
  },
  "RS": {
    "1": "Kosovo",
    "2": "Vojvodina"
  },
  "RU": {
    "1": "Adygeya",
    "2": "Aginsky Buryatsky AO",
    "3": "Gorno-Altay",
    "4": "Altaisky krai",
    "5": "Amur",
    "6": "Arkhangel'sk",
    "7": "Astrakhan'",
    "8": "Bashkortostan",
    "9": "Belgorod",
    "10": "Bryansk",
    "11": "Buryat",
    "12": "Chechnya",
    "13": "Chelyabinsk",
    "14": "Chita",
    "15": "Chukot",
    "16": "Chuvashia",
    "17": "Dagestan",
    "18": "Evenk",
    "19": "Ingush",
    "20": "Irkutsk",
    "21": "Ivanovo",
    "22": "Kabardin-Balkar",
    "23": "Kaliningrad",
    "24": "Kalmyk",
    "25": "Kaluga",
    "26": "Kamchatka",
    "27": "Karachay-Cherkess",
    "28": "Karelia",
    "29": "Kemerovo",
    "30": "Khabarovsk",
    "31": "Khakass",
    "32": "Khanty-Mansiy",
    "33": "Kirov",
    "34": "Komi",
    "36": "Koryak",
    "37": "Kostroma",
    "38": "Krasnodar",
    "39": "Krasnoyarsk",
    "40": "Kurgan",
    "41": "Kursk",
    "42": "Leningrad",
    "43": "Lipetsk",
    "44": "Magadan",
    "45": "Mariy-El",
    "46": "Mordovia",
    "47": "Moskva",
    "48": "Moscow City",
    "49": "Murmansk",
    "50": "Nenets",
    "51": "Nizhegorod",
    "52": "Novgorod",
    "53": "Novosibirsk",
    "54": "Omsk",
    "55": "Orenburg",
    "56": "Orel",
    "57": "Penza",
    "58": "Perm'",
    "59": "Primor'ye",
    "60": "Pskov",
    "61": "Rostov",
    "62": "Ryazan'",
    "63": "Sakha",
    "64": "Sakhalin",
    "65": "Samara",
    "66": "Saint Petersburg City",
    "67": "Saratov",
    "68": "North Ossetia",
    "69": "Smolensk",
    "70": "Stavropol'",
    "71": "Sverdlovsk",
    "72": "Tambovskaya oblast",
    "73": "Tatarstan",
    "74": "Taymyr",
    "75": "Tomsk",
    "76": "Tula",
    "77": "Tver'",
    "78": "Tyumen'",
    "79": "Tuva",
    "80": "Udmurt",
    "81": "Ul'yanovsk",
    "83": "Vladimir",
    "84": "Volgograd",
    "85": "Vologda",
    "86": "Voronezh",
    "87": "Yamal-Nenets",
    "88": "Yaroslavl'",
    "89": "Yevrey",
    "90": "Permskiy Kray",
    "91": "Krasnoyarskiy Kray",
    "92": "Kamchatskiy Kray",
    "93": "Zabaykal'skiy Kray"
  },
  "RW": {
    "1": "Butare",
    "6": "Gitarama",
    "7": "Kibungo",
    "9": "Kigali",
    "11": "Est",
    "12": "Kigali",
    "13": "Nord",
    "14": "Ouest",
    "15": "Sud"
  },
  "SA": {
    "2": "Al Bahah",
    "5": "Al Madinah",
    "6": "Ash Sharqiyah",
    "8": "Al Qasim",
    "10": "Ar Riyad",
    "11": "Asir Province",
    "13": "Ha'il",
    "14": "Makkah",
    "15": "Al Hudud ash Shamaliyah",
    "16": "Najran",
    "17": "Jizan",
    "19": "Tabuk",
    "20": "Al Jawf"
  },
  "SB": {
    "3": "Malaita",
    "6": "Guadalcanal",
    "7": "Isabel",
    "8": "Makira",
    "9": "Temotu",
    "10": "Central",
    "11": "Western",
    "12": "Choiseul",
    "13": "Rennell and Bellona"
  },
  "SC": {
    "1": "Anse aux Pins",
    "2": "Anse Boileau",
    "3": "Anse Etoile",
    "4": "Anse Louis",
    "5": "Anse Royale",
    "6": "Baie Lazare",
    "7": "Baie Sainte Anne",
    "8": "Beau Vallon",
    "9": "Bel Air",
    "10": "Bel Ombre",
    "11": "Cascade",
    "12": "Glacis",
    "13": "Grand' Anse",
    "14": "Grand' Anse",
    "15": "La Digue",
    "16": "La Riviere Anglaise",
    "17": "Mont Buxton",
    "18": "Mont Fleuri",
    "19": "Plaisance",
    "20": "Pointe La Rue",
    "21": "Port Glaud",
    "22": "Saint Louis",
    "23": "Takamaka"
  },
  "SD": {
    "27": "Al Wusta",
    "28": "Al Istiwa'iyah",
    "29": "Al Khartum",
    "30": "Ash Shamaliyah",
    "31": "Ash Sharqiyah",
    "32": "Bahr al Ghazal",
    "33": "Darfur",
    "34": "Kurdufan",
    "35": "Upper Nile",
    "40": "Al Wahadah State",
    "44": "Central Equatoria State",
    "49": "Southern Darfur",
    "50": "Southern Kordofan",
    "52": "Kassala",
    "53": "River Nile",
    "55": "Northern Darfur"
  },
  "SE": {
    "2": "Blekinge Lan",
    "3": "Gavleborgs Lan",
    "5": "Gotlands Lan",
    "6": "Hallands Lan",
    "7": "Jamtlands Lan",
    "8": "Jonkopings Lan",
    "9": "Kalmar Lan",
    "10": "Dalarnas Lan",
    "12": "Kronobergs Lan",
    "14": "Norrbottens Lan",
    "15": "Orebro Lan",
    "16": "Ostergotlands Lan",
    "18": "Sodermanlands Lan",
    "21": "Uppsala Lan",
    "22": "Varmlands Lan",
    "23": "Vasterbottens Lan",
    "24": "Vasternorrlands Lan",
    "25": "Vastmanlands Lan",
    "26": "Stockholms Lan",
    "27": "Skane Lan",
    "28": "Vastra Gotaland"
  },
  "SH": {
    "1": "Ascension",
    "2": "Saint Helena",
    "3": "Tristan da Cunha"
  },
  "SI": {
    "1": "Ajdovscina Commune",
    "2": "Beltinci Commune",
    "3": "Bled Commune",
    "4": "Bohinj Commune",
    "5": "Borovnica Commune",
    "6": "Bovec Commune",
    "7": "Brda Commune",
    "8": "Brezice Commune",
    "9": "Brezovica Commune",
    "11": "Celje Commune",
    "12": "Cerklje na Gorenjskem Commune",
    "13": "Cerknica Commune",
    "14": "Cerkno Commune",
    "15": "Crensovci Commune",
    "16": "Crna na Koroskem Commune",
    "17": "Crnomelj Commune",
    "19": "Divaca Commune",
    "20": "Dobrepolje Commune",
    "22": "Dol pri Ljubljani Commune",
    "24": "Dornava Commune",
    "25": "Dravograd Commune",
    "26": "Duplek Commune",
    "27": "Gorenja vas-Poljane Commune",
    "28": "Gorisnica Commune",
    "29": "Gornja Radgona Commune",
    "30": "Gornji Grad Commune",
    "31": "Gornji Petrovci Commune",
    "32": "Grosuplje Commune",
    "34": "Hrastnik Commune",
    "35": "Hrpelje-Kozina Commune",
    "36": "Idrija Commune",
    "37": "Ig Commune",
    "38": "Ilirska Bistrica Commune",
    "39": "Ivancna Gorica Commune",
    "40": "Izola-Isola Commune",
    "42": "Jursinci Commune",
    "44": "Kanal Commune",
    "45": "Kidricevo Commune",
    "46": "Kobarid Commune",
    "47": "Kobilje Commune",
    "49": "Komen Commune",
    "50": "Koper-Capodistria Urban Commune",
    "51": "Kozje Commune",
    "52": "Kranj Commune",
    "53": "Kranjska Gora Commune",
    "54": "Krsko Commune",
    "55": "Kungota Commune",
    "57": "Lasko Commune",
    "61": "Ljubljana Urban Commune",
    "62": "Ljubno Commune",
    "64": "Logatec Commune",
    "66": "Loski Potok Commune",
    "68": "Lukovica Commune",
    "71": "Medvode Commune",
    "72": "Menges Commune",
    "73": "Metlika Commune",
    "74": "Mezica Commune",
    "76": "Mislinja Commune",
    "77": "Moravce Commune",
    "78": "Moravske Toplice Commune",
    "79": "Mozirje Commune",
    "80": "Murska Sobota Urban Commune",
    "81": "Muta Commune",
    "82": "Naklo Commune",
    "83": "Nazarje Commune",
    "84": "Nova Gorica Urban Commune",
    "86": "Odranci Commune",
    "87": "Ormoz Commune",
    "88": "Osilnica Commune",
    "89": "Pesnica Commune",
    "91": "Pivka Commune",
    "92": "Podcetrtek Commune",
    "94": "Postojna Commune",
    "97": "Puconci Commune",
    "98": "Race-Fram Commune",
    "99": "Radece Commune",
    "832": "Radenci Commune",
    "833": "Radlje ob Dravi Commune",
    "834": "Radovljica Commune",
    "837": "Rogasovci Commune",
    "838": "Rogaska Slatina Commune",
    "839": "Rogatec Commune",
    "875": "Semic Commune",
    "876": "Sencur Commune",
    "877": "Sentilj Commune",
    "878": "Sentjernej Commune",
    "880": "Sevnica Commune",
    "881": "Sezana Commune",
    "882": "Skocjan Commune",
    "883": "Skofja Loka Commune",
    "918": "Skofljica Commune",
    "919": "Slovenj Gradec Urban Commune",
    "921": "Slovenske Konjice Commune",
    "922": "Smarje pri Jelsah Commune",
    "923": "Smartno ob Paki Commune",
    "924": "Sostanj Commune",
    "925": "Starse Commune",
    "926": "Store Commune",
    "961": "Sveti Jurij Commune",
    "962": "Tolmin Commune",
    "963": "Trbovlje Commune",
    "964": "Trebnje Commune",
    "965": "Trzic Commune",
    "966": "Turnisce Commune",
    "967": "Velenje Urban Commune",
    "968": "Velike Lasce Commune",
    "1004": "Vipava Commune",
    "1005": "Vitanje Commune",
    "1006": "Vodice Commune",
    "1008": "Vrhnika Commune",
    "1009": "Vuzenica Commune",
    "1010": "Zagorje ob Savi Commune",
    "1012": "Zavrc Commune",
    "1047": "Zelezniki Commune",
    "1048": "Ziri Commune",
    "1049": "Zrece Commune",
    "1050": "Benedikt Commune",
    "1051": "Bistrica ob Sotli Commune",
    "1052": "Bloke Commune",
    "1053": "Braslovce Commune",
    "1054": "Cankova Commune",
    "1055": "Cerkvenjak Commune",
    "1090": "Destrnik Commune",
    "1091": "Dobje Commune",
    "1092": "Dobrna Commune",
    "1093": "Dobrova-Horjul-Polhov Gradec Commune",
    "1094": "Dobrovnik-Dobronak Commune",
    "1095": "Dolenjske Toplice Commune",
    "1096": "Domzale Commune",
    "1097": "Grad Commune",
    "1098": "Hajdina Commune",
    "1133": "Hoce-Slivnica Commune",
    "1134": "Hodos-Hodos Commune",
    "1135": "Horjul Commune",
    "1136": "Jesenice Commune",
    "1137": "Jezersko Commune",
    "1138": "Kamnik Commune",
    "1139": "Kocevje Commune",
    "1140": "Komenda Commune",
    "1141": "Kostel Commune",
    "1176": "Krizevci Commune",
    "1177": "Kuzma Commune",
    "1178": "Lenart Commune",
    "1179": "Lendava-Lendva Commune",
    "1180": "Litija Commune",
    "1181": "Ljutomer Commune",
    "1182": "Loska Dolina Commune",
    "1183": "Lovrenc na Pohorju Commune",
    "1184": "Luce Commune",
    "1219": "Majsperk Commune",
    "1220": "Maribor Commune",
    "1221": "Markovci Commune",
    "1222": "Miklavz na Dravskem polju Commune",
    "1223": "Miren-Kostanjevica Commune",
    "1224": "Mirna Pec Commune",
    "1225": "Novo mesto Urban Commune",
    "1226": "Oplotnica Commune",
    "1227": "Piran-Pirano Commune",
    "1262": "Podlehnik Commune",
    "1263": "Podvelka Commune",
    "1264": "Polzela Commune",
    "1265": "Prebold Commune",
    "1266": "Preddvor Commune",
    "1267": "Prevalje Commune",
    "1268": "Ptuj Urban Commune",
    "1269": "Ravne na Koroskem Commune",
    "1270": "Razkrizje Commune",
    "1305": "Ribnica Commune",
    "1306": "Ribnica na Pohorju Commune",
    "1307": "Ruse Commune",
    "1308": "Salovci Commune",
    "1309": "Selnica ob Dravi Commune",
    "1310": "Sempeter-Vrtojba Commune",
    "1311": "Sentjur pri Celju Commune",
    "1312": "Slovenska Bistrica Commune",
    "1313": "Smartno pri Litiji Commune",
    "1348": "Sodrazica Commune",
    "1349": "Solcava Commune",
    "1350": "Sveta Ana Commune",
    "1351": "Sveti Andraz v Slovenskih goricah Commune",
    "1352": "Tabor Commune",
    "1353": "Tisina Commune",
    "1354": "Trnovska vas Commune",
    "1355": "Trzin Commune",
    "1356": "Velika Polana Commune",
    "1391": "Verzej Commune",
    "1392": "Videm Commune",
    "1393": "Vojnik Commune",
    "1394": "Vransko Commune",
    "1395": "Zalec Commune",
    "1396": "Zetale Commune",
    "1397": "Zirovnica Commune",
    "1398": "Zuzemberk Commune",
    "1399": "Apace Commune",
    "1434": "Cirkulane Commune",
    "1435": "Gorje",
    "1436": "Kostanjevica na Krki",
    "1437": "Log-Dragomer",
    "1438": "Makole",
    "1439": "Mirna",
    "1440": "Mokronog-Trebelno",
    "1441": "Poljcane",
    "1442": "Recica ob Savinji",
    "1477": "Rence-Vogrsko",
    "1478": "Sentrupert",
    "1479": "Smarjesk Toplice",
    "1480": "Sredisce ob Dravi",
    "1481": "Straza",
    "1483": "Sveti Jurij v Slovenskih Goricah"
  },
  "SK": {
    "1": "Banska Bystrica",
    "2": "Bratislava",
    "3": "Kosice",
    "4": "Nitra",
    "5": "Presov",
    "6": "Trencin",
    "7": "Trnava",
    "8": "Zilina"
  },
  "SL": {
    "1": "Eastern",
    "2": "Northern",
    "3": "Southern",
    "4": "Western Area"
  },
  "SM": {
    "1": "Acquaviva",
    "2": "Chiesanuova",
    "3": "Domagnano",
    "4": "Faetano",
    "5": "Fiorentino",
    "6": "Borgo Maggiore",
    "7": "San Marino",
    "8": "Monte Giardino",
    "9": "Serravalle"
  },
  "SN": {
    "1": "Dakar",
    "3": "Diourbel",
    "5": "Tambacounda",
    "7": "Thies",
    "9": "Fatick",
    "10": "Kaolack",
    "11": "Kolda",
    "12": "Ziguinchor",
    "13": "Louga",
    "14": "Saint-Louis",
    "15": "Matam"
  },
  "SO": {
    "1": "Bakool",
    "2": "Banaadir",
    "3": "Bari",
    "4": "Bay",
    "5": "Galguduud",
    "6": "Gedo",
    "7": "Hiiraan",
    "8": "Jubbada Dhexe",
    "9": "Jubbada Hoose",
    "10": "Mudug",
    "11": "Nugaal",
    "12": "Sanaag",
    "13": "Shabeellaha Dhexe",
    "14": "Shabeellaha Hoose",
    "16": "Woqooyi Galbeed",
    "18": "Nugaal",
    "19": "Togdheer",
    "20": "Woqooyi Galbeed",
    "21": "Awdal",
    "22": "Sool"
  },
  "SR": {
    "10": "Brokopondo",
    "11": "Commewijne",
    "12": "Coronie",
    "13": "Marowijne",
    "14": "Nickerie",
    "15": "Para",
    "16": "Paramaribo",
    "17": "Saramacca",
    "18": "Sipaliwini",
    "19": "Wanica"
  },
  "SS": {
    "1": "Central Equatoria",
    "2": "Eastern Equatoria",
    "3": "Jonglei",
    "4": "Lakes",
    "5": "Northern Bahr el Ghazal",
    "6": "Unity",
    "7": "Upper Nile",
    "8": "Warrap",
    "9": "Western Bahr el Ghazal",
    "10": "Western Equatoria"
  },
  "ST": {
    "1": "Principe",
    "2": "Sao Tome"
  },
  "SV": {
    "1": "Ahuachapan",
    "2": "Cabanas",
    "3": "Chalatenango",
    "4": "Cuscatlan",
    "5": "La Libertad",
    "6": "La Paz",
    "7": "La Union",
    "8": "Morazan",
    "9": "San Miguel",
    "10": "San Salvador",
    "11": "Santa Ana",
    "12": "San Vicente",
    "13": "Sonsonate",
    "14": "Usulutan"
  },
  "SY": {
    "1": "Al Hasakah",
    "2": "Al Ladhiqiyah",
    "3": "Al Qunaytirah",
    "4": "Ar Raqqah",
    "5": "As Suwayda'",
    "6": "Dar",
    "7": "Dayr az Zawr",
    "8": "Rif Dimashq",
    "9": "Halab",
    "10": "Hamah",
    "11": "Hims",
    "12": "Idlib",
    "13": "Dimashq",
    "14": "Tartus"
  },
  "SZ": {
    "1": "Hhohho",
    "2": "Lubombo",
    "3": "Manzini",
    "4": "Shiselweni",
    "5": "Praslin"
  },
  "TD": {
    "1": "Batha",
    "2": "Biltine",
    "3": "Borkou-Ennedi-Tibesti",
    "4": "Chari-Baguirmi",
    "5": "Guera",
    "6": "Kanem",
    "7": "Lac",
    "8": "Logone Occidental",
    "9": "Logone Oriental",
    "10": "Mayo-Kebbi",
    "11": "Moyen-Chari",
    "12": "Ouaddai",
    "13": "Salamat",
    "14": "Tandjile"
  },
  "TG": {
    "22": "Centrale",
    "23": "Kara",
    "24": "Maritime",
    "25": "Plateaux",
    "26": "Savanes"
  },
  "TH": {
    "1": "Mae Hong Son",
    "2": "Chiang Mai",
    "3": "Chiang Rai",
    "4": "Nan",
    "5": "Lamphun",
    "6": "Lampang",
    "7": "Phrae",
    "8": "Tak",
    "9": "Sukhothai",
    "10": "Uttaradit",
    "11": "Kamphaeng Phet",
    "12": "Phitsanulok",
    "13": "Phichit",
    "14": "Phetchabun",
    "15": "Uthai Thani",
    "16": "Nakhon Sawan",
    "17": "Nong Khai",
    "18": "Loei",
    "20": "Sakon Nakhon",
    "21": "Nakhon Phanom",
    "22": "Khon Kaen",
    "23": "Kalasin",
    "24": "Maha Sarakham",
    "25": "Roi Et",
    "26": "Chaiyaphum",
    "27": "Nakhon Ratchasima",
    "28": "Buriram",
    "29": "Surin",
    "30": "Sisaket",
    "31": "Narathiwat",
    "32": "Chai Nat",
    "33": "Sing Buri",
    "34": "Lop Buri",
    "35": "Ang Thong",
    "36": "Phra Nakhon Si Ayutthaya",
    "37": "Saraburi",
    "38": "Nonthaburi",
    "39": "Pathum Thani",
    "40": "Krung Thep",
    "41": "Phayao",
    "42": "Samut Prakan",
    "43": "Nakhon Nayok",
    "44": "Chachoengsao",
    "45": "Prachin Buri",
    "46": "Chon Buri",
    "47": "Rayong",
    "48": "Chanthaburi",
    "49": "Trat",
    "50": "Kanchanaburi",
    "51": "Suphan Buri",
    "52": "Ratchaburi",
    "53": "Nakhon Pathom",
    "54": "Samut Songkhram",
    "55": "Samut Sakhon",
    "56": "Phetchaburi",
    "57": "Prachuap Khiri Khan",
    "58": "Chumphon",
    "59": "Ranong",
    "60": "Surat Thani",
    "61": "Phangnga",
    "62": "Phuket",
    "63": "Krabi",
    "64": "Nakhon Si Thammarat",
    "65": "Trang",
    "66": "Phatthalung",
    "67": "Satun",
    "68": "Songkhla",
    "69": "Pattani",
    "70": "Yala",
    "71": "Ubon Ratchathani",
    "72": "Yasothon",
    "73": "Nakhon Phanom",
    "74": "Prachin Buri",
    "75": "Ubon Ratchathani",
    "76": "Udon Thani",
    "77": "Amnat Charoen",
    "78": "Mukdahan",
    "79": "Nong Bua Lamphu",
    "80": "Sa Kaeo",
    "81": "Bueng Kan"
  },
  "TJ": {
    "1": "Kuhistoni Badakhshon",
    "2": "Khatlon",
    "3": "Sughd",
    "4": "Dushanbe",
    "5": "Nohiyahoi Tobei Jumhuri"
  },
  "TL": {
    "6": "Dili"
  },
  "TM": {
    "1": "Ahal",
    "2": "Balkan",
    "3": "Dashoguz",
    "4": "Lebap",
    "5": "Mary"
  },
  "TN": {
    "2": "Kasserine",
    "3": "Kairouan",
    "6": "Jendouba",
    "10": "Qafsah",
    "14": "El Kef",
    "15": "Al Mahdia",
    "16": "Al Munastir",
    "17": "Bajah",
    "18": "Bizerte",
    "19": "Nabeul",
    "22": "Siliana",
    "23": "Sousse",
    "27": "Ben Arous",
    "28": "Madanin",
    "29": "Gabes",
    "31": "Kebili",
    "32": "Sfax",
    "33": "Sidi Bou Zid",
    "34": "Tataouine",
    "35": "Tozeur",
    "36": "Tunis",
    "37": "Zaghouan",
    "38": "Aiana",
    "39": "Manouba"
  },
  "TO": {
    "1": "Ha",
    "2": "Tongatapu",
    "3": "Vava"
  },
  "TR": {
    "2": "Adiyaman",
    "3": "Afyonkarahisar",
    "4": "Agri",
    "5": "Amasya",
    "7": "Antalya",
    "8": "Artvin",
    "9": "Aydin",
    "10": "Balikesir",
    "11": "Bilecik",
    "12": "Bingol",
    "13": "Bitlis",
    "14": "Bolu",
    "15": "Burdur",
    "16": "Bursa",
    "17": "Canakkale",
    "19": "Corum",
    "20": "Denizli",
    "21": "Diyarbakir",
    "22": "Edirne",
    "23": "Elazig",
    "24": "Erzincan",
    "25": "Erzurum",
    "26": "Eskisehir",
    "28": "Giresun",
    "31": "Hatay",
    "32": "Mersin",
    "33": "Isparta",
    "34": "Istanbul",
    "35": "Izmir",
    "37": "Kastamonu",
    "38": "Kayseri",
    "39": "Kirklareli",
    "40": "Kirsehir",
    "41": "Kocaeli",
    "43": "Kutahya",
    "44": "Malatya",
    "45": "Manisa",
    "46": "Kahramanmaras",
    "48": "Mugla",
    "49": "Mus",
    "50": "Nevsehir",
    "52": "Ordu",
    "53": "Rize",
    "54": "Sakarya",
    "55": "Samsun",
    "57": "Sinop",
    "58": "Sivas",
    "59": "Tekirdag",
    "60": "Tokat",
    "61": "Trabzon",
    "62": "Tunceli",
    "63": "Sanliurfa",
    "64": "Usak",
    "65": "Van",
    "66": "Yozgat",
    "68": "Ankara",
    "69": "Gumushane",
    "70": "Hakkari",
    "71": "Konya",
    "72": "Mardin",
    "73": "Nigde",
    "74": "Siirt",
    "75": "Aksaray",
    "76": "Batman",
    "77": "Bayburt",
    "78": "Karaman",
    "79": "Kirikkale",
    "80": "Sirnak",
    "81": "Adana",
    "82": "Cankiri",
    "83": "Gaziantep",
    "84": "Kars",
    "85": "Zonguldak",
    "86": "Ardahan",
    "87": "Bartin",
    "88": "Igdir",
    "89": "Karabuk",
    "90": "Kilis",
    "91": "Osmaniye",
    "92": "Yalova",
    "93": "Duzce"
  },
  "TT": {
    "1": "Arima",
    "2": "Caroni",
    "3": "Mayaro",
    "4": "Nariva",
    "5": "Port-of-Spain",
    "6": "Saint Andrew",
    "7": "Saint David",
    "8": "Saint George",
    "9": "Saint Patrick",
    "10": "San Fernando",
    "11": "Tobago",
    "12": "Victoria"
  },
  "TW": {
    "1": "Fu-chien",
    "2": "Kao-hsiung",
    "3": "T'ai-pei",
    "4": "T'ai-wan"
  },
  "TZ": {
    "2": "Pwani",
    "3": "Dodoma",
    "4": "Iringa",
    "5": "Kigoma",
    "6": "Kilimanjaro",
    "7": "Lindi",
    "8": "Mara",
    "9": "Mbeya",
    "10": "Morogoro",
    "11": "Mtwara",
    "12": "Mwanza",
    "13": "Pemba North",
    "14": "Ruvuma",
    "15": "Shinyanga",
    "16": "Singida",
    "17": "Tabora",
    "18": "Tanga",
    "19": "Kagera",
    "20": "Pemba South",
    "21": "Zanzibar Central",
    "22": "Zanzibar North",
    "23": "Dar es Salaam",
    "24": "Rukwa",
    "25": "Zanzibar Urban",
    "26": "Arusha",
    "27": "Manyara"
  },
  "UA": {
    "1": "Cherkas'ka Oblast'",
    "2": "Chernihivs'ka Oblast'",
    "3": "Chernivets'ka Oblast'",
    "4": "Dnipropetrovs'ka Oblast'",
    "5": "Donets'ka Oblast'",
    "6": "Ivano-Frankivs'ka Oblast'",
    "7": "Kharkivs'ka Oblast'",
    "8": "Khersons'ka Oblast'",
    "9": "Khmel'nyts'ka Oblast'",
    "10": "Kirovohrads'ka Oblast'",
    "11": "Krym",
    "12": "Kyyiv",
    "13": "Kyyivs'ka Oblast'",
    "14": "Luhans'ka Oblast'",
    "15": "L'vivs'ka Oblast'",
    "16": "Mykolayivs'ka Oblast'",
    "17": "Odes'ka Oblast'",
    "18": "Poltavs'ka Oblast'",
    "19": "Rivnens'ka Oblast'",
    "20": "Sevastopol'",
    "21": "Sums'ka Oblast'",
    "22": "Ternopil's'ka Oblast'",
    "23": "Vinnyts'ka Oblast'",
    "24": "Volyns'ka Oblast'",
    "25": "Zakarpats'ka Oblast'",
    "26": "Zaporiz'ka Oblast'",
    "27": "Zhytomyrs'ka Oblast'"
  },
  "UG": {
    "26": "Apac",
    "28": "Bundibugyo",
    "29": "Bushenyi",
    "30": "Gulu",
    "31": "Hoima",
    "33": "Jinja",
    "36": "Kalangala",
    "37": "Kampala",
    "38": "Kamuli",
    "39": "Kapchorwa",
    "40": "Kasese",
    "41": "Kibale",
    "42": "Kiboga",
    "43": "Kisoro",
    "45": "Kotido",
    "46": "Kumi",
    "47": "Lira",
    "50": "Masindi",
    "52": "Mbarara",
    "56": "Mubende",
    "58": "Nebbi",
    "59": "Ntungamo",
    "60": "Pallisa",
    "61": "Rakai",
    "65": "Adjumani",
    "66": "Bugiri",
    "67": "Busia",
    "69": "Katakwi",
    "70": "Luwero",
    "71": "Masaka",
    "72": "Moyo",
    "73": "Nakasongola",
    "74": "Sembabule",
    "76": "Tororo",
    "77": "Arua",
    "78": "Iganga",
    "79": "Kabarole",
    "80": "Kaberamaido",
    "81": "Kamwenge",
    "82": "Kanungu",
    "83": "Kayunga",
    "84": "Kitgum",
    "85": "Kyenjojo",
    "86": "Mayuge",
    "87": "Mbale",
    "88": "Moroto",
    "89": "Mpigi",
    "90": "Mukono",
    "91": "Nakapiripirit",
    "92": "Pader",
    "93": "Rukungiri",
    "94": "Sironko",
    "95": "Soroti",
    "96": "Wakiso",
    "97": "Yumbe"
  },
  "US": {
    "848": "Armed Forces Americas",
    "852": "Armed Forces Europe",
    "858": "Alaska",
    "859": "Alabama",
    "863": "Armed Forces Pacific",
    "865": "Arkansas",
    "866": "American Samoa",
    "873": "Arizona",
    "934": "California",
    "948": "Colorado",
    "953": "Connecticut",
    "979": "District of Columbia",
    "981": "Delaware",
    "1074": "Florida",
    "1075": "Federated States of Micronesia",
    "1106": "Georgia",
    "1126": "Guam",
    "1157": "Hawaii",
    "1192": "Iowa",
    "1195": "Idaho",
    "1203": "Illinois",
    "1205": "Indiana",
    "1296": "Kansas",
    "1302": "Kentucky",
    "1321": "Louisiana",
    "1364": "Massachusetts",
    "1367": "Maryland",
    "1368": "Maine",
    "1371": "Marshall Islands",
    "1372": "Michigan",
    "1377": "Minnesota",
    "1378": "Missouri",
    "1379": "Northern Mariana Islands",
    "1382": "Mississippi",
    "1383": "Montana",
    "1409": "North Carolina",
    "1410": "North Dakota",
    "1411": "Nebraska",
    "1414": "New Hampshire",
    "1416": "New Jersey",
    "1419": "New Mexico",
    "1428": "Nevada",
    "1431": "New York",
    "1457": "Ohio",
    "1460": "Oklahoma",
    "1467": "Oregon",
    "1493": "Pennsylvania",
    "1515": "Palau",
    "1587": "Rhode Island",
    "1624": "South Carolina",
    "1625": "South Dakota",
    "1678": "Tennessee",
    "1688": "Texas",
    "1727": "Utah",
    "1751": "Virginia",
    "1759": "Virgin Islands",
    "1770": "Vermont",
    "1794": "Washington",
    "1802": "Wisconsin",
    "1815": "West Virginia",
    "1818": "Wyoming"
  },
  "UY": {
    "1": "Artigas",
    "2": "Canelones",
    "3": "Cerro Largo",
    "4": "Colonia",
    "5": "Durazno",
    "6": "Flores",
    "7": "Florida",
    "8": "Lavalleja",
    "9": "Maldonado",
    "10": "Montevideo",
    "11": "Paysandu",
    "12": "Rio Negro",
    "13": "Rivera",
    "14": "Rocha",
    "15": "Salto",
    "16": "San Jose",
    "17": "Soriano",
    "18": "Tacuarembo",
    "19": "Treinta y Tres"
  },
  "UZ": {
    "1": "Andijon",
    "2": "Bukhoro",
    "3": "Farghona",
    "4": "Jizzakh",
    "5": "Khorazm",
    "6": "Namangan",
    "7": "Nawoiy",
    "8": "Qashqadaryo",
    "9": "Qoraqalpoghiston",
    "10": "Samarqand",
    "11": "Sirdaryo",
    "12": "Surkhondaryo",
    "13": "Toshkent",
    "14": "Toshkent",
    "15": "Jizzax"
  },
  "VC": {
    "1": "Charlotte",
    "2": "Saint Andrew",
    "3": "Saint David",
    "4": "Saint George",
    "5": "Saint Patrick",
    "6": "Grenadines"
  },
  "VE": {
    "1": "Amazonas",
    "2": "Anzoategui",
    "3": "Apure",
    "4": "Aragua",
    "5": "Barinas",
    "6": "Bolivar",
    "7": "Carabobo",
    "8": "Cojedes",
    "9": "Delta Amacuro",
    "11": "Falcon",
    "12": "Guarico",
    "13": "Lara",
    "14": "Merida",
    "15": "Miranda",
    "16": "Monagas",
    "17": "Nueva Esparta",
    "18": "Portuguesa",
    "19": "Sucre",
    "20": "Tachira",
    "21": "Trujillo",
    "22": "Yaracuy",
    "23": "Zulia",
    "24": "Dependencias Federales",
    "25": "Distrito Federal",
    "26": "Vargas"
  },
  "VN": {
    "1": "An Giang",
    "3": "Ben Tre",
    "5": "Cao Bang",
    "9": "Dong Thap",
    "13": "Hai Phong",
    "20": "Ho Chi Minh",
    "21": "Kien Giang",
    "23": "Lam Dong",
    "24": "Long An",
    "30": "Quang Ninh",
    "32": "Son La",
    "33": "Tay Ninh",
    "34": "Thanh Hoa",
    "35": "Thai Binh",
    "37": "Tien Giang",
    "39": "Lang Son",
    "43": "Dong Nai",
    "44": "Ha Noi",
    "45": "Ba Ria-Vung Tau",
    "46": "Binh Dinh",
    "47": "Binh Thuan",
    "49": "Gia Lai",
    "50": "Ha Giang",
    "52": "Ha Tinh",
    "53": "Hoa Binh",
    "54": "Khanh Hoa",
    "55": "Kon Tum",
    "58": "Nghe An",
    "59": "Ninh Binh",
    "60": "Ninh Thuan",
    "61": "Phu Yen",
    "62": "Quang Binh",
    "63": "Quang Ngai",
    "64": "Quang Tri",
    "65": "Soc Trang",
    "66": "Thua Thien-Hue",
    "67": "Tra Vinh",
    "68": "Tuyen Quang",
    "69": "Vinh Long",
    "70": "Yen Bai",
    "71": "Bac Giang",
    "72": "Bac Kan",
    "73": "Bac Lieu",
    "74": "Bac Ninh",
    "75": "Binh Duong",
    "76": "Binh Phuoc",
    "77": "Ca Mau",
    "78": "Da Nang",
    "79": "Hai Duong",
    "80": "Ha Nam",
    "81": "Hung Yen",
    "82": "Nam Dinh",
    "83": "Phu Tho",
    "84": "Quang Nam",
    "85": "Thai Nguyen",
    "86": "Vinh Phuc",
    "87": "Can Tho",
    "88": "Dac Lak",
    "89": "Lai Chau",
    "90": "Lao Cai",
    "91": "Dak Nong",
    "92": "Dien Bien",
    "93": "Hau Giang"
  },
  "VU": {
    "5": "Ambrym",
    "6": "Aoba",
    "7": "Torba",
    "8": "Efate",
    "9": "Epi",
    "10": "Malakula",
    "11": "Paama",
    "12": "Pentecote",
    "13": "Sanma",
    "14": "Shepherd",
    "15": "Tafea",
    "16": "Malampa",
    "17": "Penama",
    "18": "Shefa"
  },
  "WS": {
    "2": "Aiga-i-le-Tai",
    "3": "Atua",
    "4": "Fa",
    "5": "Gaga",
    "6": "Va",
    "7": "Gagaifomauga",
    "8": "Palauli",
    "9": "Satupa",
    "10": "Tuamasaga",
    "11": "Vaisigano"
  },
  "YE": {
    "1": "Abyan",
    "2": "Adan",
    "3": "Al Mahrah",
    "4": "Hadramawt",
    "5": "Shabwah",
    "6": "Lahij",
    "7": "Al Bayda'",
    "8": "Al Hudaydah",
    "9": "Al Jawf",
    "10": "Al Mahwit",
    "11": "Dhamar",
    "12": "Hajjah",
    "13": "Ibb",
    "14": "Ma'rib",
    "15": "Sa'dah",
    "16": "San'a'",
    "17": "Taizz",
    "18": "Ad Dali",
    "19": "Amran",
    "20": "Al Bayda'",
    "21": "Al Jawf",
    "22": "Hajjah",
    "23": "Ibb",
    "24": "Lahij",
    "25": "Taizz"
  },
  "ZA": {
    "1": "North-Western Province",
    "2": "KwaZulu-Natal",
    "3": "Free State",
    "5": "Eastern Cape",
    "6": "Gauteng",
    "7": "Mpumalanga",
    "8": "Northern Cape",
    "9": "Limpopo",
    "10": "North-West",
    "11": "Western Cape"
  },
  "ZM": {
    "1": "Western",
    "2": "Central",
    "3": "Eastern",
    "4": "Luapula",
    "5": "Northern",
    "6": "North-Western",
    "7": "Southern",
    "8": "Copperbelt",
    "9": "Lusaka"
  },
  "ZW": {
    "1": "Manicaland",
    "2": "Midlands",
    "3": "Mashonaland Central",
    "4": "Mashonaland East",
    "5": "Mashonaland West",
    "6": "Matabeleland North",
    "7": "Matabeleland South",
    "8": "Masvingo",
    "9": "Bulawayo",
    "10": "Harare"
  }
};

},{}],6:[function(require,module,exports){
(function (Buffer){
var fs = require('fs');

var File = require('./file'),
  DatabaseInfo = require('./database_info');

const GEOIP_STANDARD = 0;
const GEOIP_MEMORY_CACHE = 1;
const GEOIP_CHECK_UPDATES = 2;
const GEOIP_INDEX_CACHE = 4;


function Database(path, opts) {
  this.path = path;
  this.opts = opts || {};
  this.mtime = -1;

  this.dboptions = GEOIP_STANDARD;

  // Ignore `indexCache` when `memoryCache` enabled, since it doesn't make sense
  if (this.opts.memoryCache) delete this.opts.indexCache;

  if (this.opts.indexCache)  this.dboptions |= GEOIP_INDEX_CACHE;
  if (this.opts.memoryCache) this.dboptions |= GEOIP_MEMORY_CACHE;
  if (this.opts.checkForUpdates) this.dboptions |= GEOIP_CHECK_UPDATES;

  this.init();
};


Database.prototype.init = function() {
  this.indexCache = null;
  this.lastNetmask = null;
  this.dbbuffer = null;
  this.cache = null;

  if (this.file)
    this.file.close();

  this.file = new File(this.path);
  this.info = new DatabaseInfo(this.file);

  this.segment = this.info.segment;
  this.recordLength = this.info.recordLength;
  this.type = this.info.type;

  var l;
  if (this.opts.memoryCache) {
    l = this.file.length();
    this.dbbuffer = new Buffer(l);
    this.file.seek(0);
    this.file.readFully(this.dbbuffer, 0, l);
    this.file.close();
  }

  if (this.opts.indexCache) {
    l = this.segment * this.recordLength * 2;
    this.indexCache = new Buffer(l);
    if (this.indexCache !== null) {
      this.file.seek(0);
      this.file.readFully(this.indexCache, 0, l);
    }
  } else {
    this.indexCache = null;
  }
};


Database.prototype.checkForUpdates = function() {

  var mtime = fs.lstatSync(this.path).mtime.valueOf();

  // set initial value
  if (this.mtime === -1)
    return this.mtime = mtime;

  // check for updates/modifications
  if (this.mtime === mtime)
    return;

  this.mtime = mtime;
  this.init();
};


module.exports = Database

}).call(this,require("buffer").Buffer)
},{"./database_info":7,"./file":9,"buffer":21,"fs":18}],7:[function(require,module,exports){
(function (Buffer){

const DATABASE_INFO_MAX_SIZE   = 100;
const COUNTRY_BEGIN            = 16776960;
const STATE_BEGIN_REV0         = 16700000;
const STATE_BEGIN_REV1         = 16000000;
const STRUCTURE_INFO_MAX_SIZE  = 20;
const SEGMENT_RECORD_LENGTH    = 3;
const STANDARD_RECORD_LENGTH   = 3;
const ORG_RECORD_LENGTH        = 4;


module.exports = function(file) {

  var i, j;
  var delim = new Buffer(3);
  var buf = new Buffer(SEGMENT_RECORD_LENGTH);
  var self = module.exports;

  this.type = self.COUNTRY_EDITION;
  this.segment = null;
  this.recordLength = 0;

  file.seek(file.length() - 3);

  for (i = 0; i < STRUCTURE_INFO_MAX_SIZE; i++) {
    file.readFully(delim);

    if (delim[0] == 255 && delim[1] === 255 && delim[2] === 255) {
      this.type = file.readByte();

      if (this.type >= 106) {
        // Backward compatibility with databases from April 2003 and earlier
        this.type -= 105;
      }

      // Determine the database type.
      if (this.type === self.REGION_EDITION_REV0) {
        this.segment = STATE_BEGIN_REV0;
        this.recordLength = STANDARD_RECORD_LENGTH;

      } else if (this.type === self.REGION_EDITION_REV1){
        this.segment = STATE_BEGIN_REV1;
        this.recordLength = STANDARD_RECORD_LENGTH;

      } else if (this.type === self.CITY_EDITION_REV0 ||
             this.type === self.CITY_EDITION_REV1 ||
             this.type === self.ORG_EDITION ||
             this.type === self.ORG_EDITION_V6 ||
             this.type === self.ISP_EDITION ||
             this.type === self.ISP_EDITION_V6 ||
             this.type === self.DOMAIN_EDITION ||
             this.type === self.DOMAIN_EDITION_V6 ||
             this.type === self.ASNUM_EDITION ||
             this.type === self.ASNUM_EDITION_V6 ||
             this.type === self.NETSPEED_EDITION_REV1 ||
             this.type === self.NETSPEED_EDITION_REV1_V6 ||
             this.type === self.CITY_EDITION_REV0_V6 ||
             this.type === self.CITY_EDITION_REV1_V6
      ) {
        this.segment = 0;

        if (this.type === self.CITY_EDITION_REV0 ||
          this.type === self.CITY_EDITION_REV1 ||
          this.type === self.ASNUM_EDITION_V6 ||
          this.type === self.NETSPEED_EDITION_REV1 ||
          this.type === self.NETSPEED_EDITION_REV1_V6 ||
          this.type === self.CITY_EDITION_REV0_V6 ||
          this.type === self.CITY_EDITION_REV1_V6 ||
          this.type === self.ASNUM_EDITION
        ) {
          this.recordLength = STANDARD_RECORD_LENGTH;
        } else {
          this.recordLength = ORG_RECORD_LENGTH;
        }

        file.readFully(buf);
        for (j = 0; j < SEGMENT_RECORD_LENGTH; j++) {
          this.segment += buf.readUInt8(j) << (j * 8);
        }
      }
      break;
    } else {
      file.seek(file.getFilePointer() - 4);
    }
  }

  if (this.type === self.COUNTRY_EDITION ||
    this.type === self.COUNTRY_EDITION_V6 ||
    this.type === self.PROXY_EDITION ||
    this.type === self.NETSPEED_EDITION
  ) {
    this.segment = COUNTRY_BEGIN;
    this.recordLength = STANDARD_RECORD_LENGTH;
  }


  var hasStructureInfo = false;
  delim = new Buffer(3);

  // TODO: refactor it
  // Advance to part of file where database info is stored.
  file.seek(file.length() - 3);
  for (i = 0; i < STRUCTURE_INFO_MAX_SIZE; i++) {
    file.readFully(delim);
    if (delim[0] === 255 && delim[1] === 255 && delim[2] === 255) {
      hasStructureInfo = true;
      break;
    }
    file.seek(file.getFilePointer() - 4);
  }

  if (hasStructureInfo) {
    file.seek(file.getFilePointer() - 6);
  } else {
    // No structure info, must be pre Sep 2002 database, go back to end.
    file.seek(file.length() - 3);
  }

  this.info = null;
  // Find the database info string.
  for (i = 0; i < DATABASE_INFO_MAX_SIZE; i++) {
    file.readFully(delim);
    if (delim[0] + delim[1] + delim[2] === 0) {
      if (i === 0) {
        this.info = 'Unknown';
      } else {
        this.info = new Buffer(i);
        file.readFully(this.info);
        this.info = this.info.toString();
        break;
      }
    }
    file.seek(file.getFilePointer() - 4);
  }

  if (!this.info)
    throw new Error('Unable to find database info');

  this.isPremium = this.info.indexOf('FREE') < 0 && this.info.indexOf('LITE') < 0;

  this.date = null;
  for (i = 0; i < this.info.length - 9; i++) {
    if (this.info.charCodeAt(i) === 0x20) {
      this.date = new Date(
        this.info.substring(i+1, i+9).replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3')
      );
      break;
    }
  }
};

// constDatabase types
module.exports.COUNTRY_EDITION          = 1;
module.exports.REGION_EDITION_REV0      = 7;
module.exports.CITY_EDITION_REV0        = 6;
module.exports.ORG_EDITION              = 5;
module.exports.ISP_EDITION              = 4;
module.exports.CITY_EDITION_REV1        = 2;
module.exports.REGION_EDITION_REV1      = 3;
module.exports.PROXY_EDITION            = 8;
module.exports.ASNUM_EDITION            = 9;
module.exports.NETSPEED_EDITION         = 10;
module.exports.DOMAIN_EDITION           = 11;
module.exports.COUNTRY_EDITION_V6       = 12;
module.exports.LOCATIONA_EDITION        = 13;
module.exports.ACCURACYRADIUS_EDITION   = 14;
module.exports.CITYCONFIDENCE_EDITION   = 15; /* unsupported */
module.exports.CITYCONFIDENCEDIST_EDITION = 16; /* unsupported */
module.exports.LARGE_COUNTRY_EDITION    = 17;
module.exports.LARGE_COUNTRY_EDITION_V6 = 18;
module.exports.CITYCONFIDENCEDIST_ISP_ORG_EDITION = 19; /* unsued, but gaps are not allowed */
module.exports.CCM_COUNTRY_EDITION      = 20; /* unsued, but gaps are not allowed */
module.exports.ASNUM_EDITION_V6         = 21;
module.exports.ISP_EDITION_V6           = 22;
module.exports.ORG_EDITION_V6           = 23;
module.exports.DOMAIN_EDITION_V6        = 24;
module.exports.LOCATIONA_EDITION_V6     = 25;
module.exports.REGISTRAR_EDITION        = 26;
module.exports.REGISTRAR_EDITION_V6     = 27;
module.exports.USERTYPE_EDITION         = 28;
module.exports.USERTYPE_EDITION_V6      = 29;
module.exports.CITY_EDITION_REV1_V6     = 30;
module.exports.CITY_EDITION_REV0_V6     = 31;
module.exports.NETSPEED_EDITION_REV1    = 32;
module.exports.NETSPEED_EDITION_REV1_V6 = 33;
module.exports.COUNTRYCONF_EDITION      = 34;
module.exports.CITYCONF_EDITION         = 35;
module.exports.REGIONCONF_EDITION       = 36;
module.exports.POSTALCONF_EDITION       = 37;
module.exports.ACCURACYRADIUS_EDITION_V6 = 38;

}).call(this,require("buffer").Buffer)
},{"buffer":21}],8:[function(require,module,exports){
function DynBuffer(source, offset, length) {
  this.source = source;
  this.offset = offset;
  this.length = length;
}

DynBuffer.prototype.source = null;

DynBuffer.prototype.offset = null;

DynBuffer.prototype.length = null;

DynBuffer.prototype.toString = function(encoding, start, end) {
  // var a = new Array().slice.call(b, 0)
  // return String.fromCharCode.apply(String, a)
  return this.source.toString(encoding, this.offset + start, this.offset + end);
};

DynBuffer.prototype.readUInt8 = function(start) {
  return this.source.readUInt8(this.offset + start);
};

DynBuffer.prototype.pointer = function(start) {
  return this.offset + start;
};

DynBuffer.prototype.at = function(start) {
  return this.source[this.offset + start];
};

DynBuffer.prototype.range = function(start, end) {
  return Array.prototype.slice.call(this.source, this.offset + start, this.offset + end);
};

module.exports = DynBuffer;

},{}],9:[function(require,module,exports){
(function (Buffer){
var fs = require('fs');

// Based on
// http://docs.oracle.com/javase/6/docs/api/java/io/RandomAccessFile.html

function File(path) {
  this.meta = fs.statSync(path);
  this.ba = fs.openSync(path, 'r');
}

File.prototype.ba = null;

File.prototype.meta = null;

File.prototype.pointer = 0;

File.prototype.closed = false;

File.prototype.length = function() {
  return this.meta.size;
};

File.prototype.seek = function(p) {
  this.pointer = p;
};

File.prototype.readByte = function() {
  var b = new Buffer(1);
  fs.readSync(this.ba, b, 0, 1, this.pointer++);
  return b.readUInt8(0);
};

File.prototype.readFully = function(dest) {
  var len = fs.readSync(this.ba, dest, 0, dest.length, this.pointer);
  this.pointer += len;
  return len;
};

File.prototype.getFilePointer = function() {
  return this.pointer;
};

File.prototype.close = function() {
  if (this.ba && !this.closed)
    fs.closeSync(this.ba);
  this.closed = true;
};

module.exports = File;

}).call(this,require("buffer").Buffer)
},{"buffer":21,"fs":18}],10:[function(require,module,exports){
var assert = require('assert');


exports.v4ToLong = function(ip) {
  ip = ip.split('.', 4);

  var o0 = parseInt(ip[0]),
    o1 = parseInt(ip[1]),
    o2 = parseInt(ip[2]),
    o3 = parseInt(ip[3]);

  // assert(o0 > 0, 'Invalid IP address')
  // assert(o1 > 0, 'Invalid IP address')
  // assert(o2 > 0, 'Invalid IP address')
  // assert(o3 > 0, 'Invalid IP address')

  return (o0 * 0x1000000) + (o1 * 0x10000) + (o2 * 0x100) + o3;
};


exports.v6ToArray = function(ip) {
  // var a = Uint16Array(16);
  var a = Array.apply(null, new Array(16)).map(Number.prototype.valueOf, 0);

  if (ip.indexOf('::') === 0) {
    var at = ip.indexOf('::ffff') > -1 ? 7 : 2;
    ip = ip.substring(at).split('.', 4);
    for (var i = 0; i < ip.length; i++) {
      a[16 - (4 - i)] = +ip[i];
    };
    return a;
  }

  var parts = ip.split('::', 2),
    left = parts[0],
    right = parts[1];

  if (left) {
    var parsed = left.split(':');
    for (var i = 0; i < parsed.length; i++) {
      var chunk = parseInt(parsed[i], 16);
      a[i * 2] = chunk >> 8;
      a[i * 2 + 1] = chunk & 0xff;
    };
  }

  if (right) {
    var parsed = right.split(':');
    var pl = parsed.length;
    for (var i = 0; i < parsed.length; i++) {
      var chunk = parseInt(parsed[i], 16);
      a[15 - (pl - i * 2 + 1)] = chunk >> 8;
      a[15 - (pl - i * 2)] = chunk & 0xff;
    };
  }

  return a;
};


exports.v4toBinary = function(ip) {
  ip = ip.split('.', 4)

  var res = [];
  var o0 = (+ip[0]).toString(2)
  var o1 = (+ip[1]).toString(2)
  var o2 = (+ip[2]).toString(2)
  var o3 = (+ip[3]).toString(2)

  while (o0.length < 8) o0 = '0' + o0
  while (o1.length < 8) o1 = '0' + o1
  while (o2.length < 8) o2 = '0' + o2
  while (o3.length < 8) o3 = '0' + o3

  return o0 + o1 + o2 + o3;
};

},{"assert":19}],11:[function(require,module,exports){
const EARTH_DIAMETER = 2 * 6378.2;
const PI = 3.14159265;
const RAD_CONVERT = PI / 180;

module.exports = function() {
  this.countryCode = null;
  this.countryName = null;
  this.region = null;
  this.city = null;
  this.postalCode = null;
  this.latitude = null;
  this.longitude = null;
  this.dmaCode = null;
  this.areaCode = null;
  this.metroCode = null;

  this.distance = function(loc) {
    var temp;

    var lat1 = this.latitude;
    var lon1 = this.longitude;
    var lat2 = loc.latitude;
    var lon2 = loc.longitude;

    // convert degrees to radians
    lat1 *= RAD_CONVERT;
    lat2 *= RAD_CONVERT;

    // find the deltas
    var deltaLat = lat2 - lat1;
    var deltaLon = (lon2 - lon1) * RAD_CONVERT;

    // Find the great circle distance
    temp = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);
    return Math.round(EARTH_DIAMETER * Math.atan2(Math.sqrt(temp), Math.sqrt(1 - temp)) * 1e6) / 1e6;
  };
};

},{}],12:[function(require,module,exports){
var countries = require('../data/country_data');
var continents = require('../data/continents');

const COUNTRY_BEGIN = 16776960;
const UNKNOWN_COUNTRY = new Country("--", "N/A");


function Country(code, name) {
  this.code = code;
  this.name = name;
  this.continentCode = continents[code] || '--';
}


module.exports = function(db, cseek) {
  var ret = cseek - COUNTRY_BEGIN;

  if (ret === 0)
    return UNKNOWN_COUNTRY;

  return new Country(countries.codes[ret], countries.names[ret]);
};

},{"../data/continents":3,"../data/country_data":4}],13:[function(require,module,exports){
(function (Buffer){
var DynBuffer = require('../dyn_buffer'),
  Location = require('../location'),
  DatabaseInfo = require('../database_info');

var regionNameData = require('../data/region_name_data'),
  countriesData = require('../data/country_data'),
  continentsData = require('../data/continents');

const FULL_RECORD_LENGTH = 60;

module.exports = function(db, cseek) {
  var recordBuf;
  var recordBufOffset = 0;

  var record = new Location();

  var pointer = 0;
  var j;
  var latitude = 0, longitude = 0;

  if (cseek === db.segment)
    return null;

  var recordPointer = cseek + (2 * db.recordLength - 1) * db.segment;

  if (db.opts.memoryCache) {
    recordBuf = new DynBuffer(db.dbbuffer, recordPointer,
      Math.min(db.dbbuffer.length - recordPointer, FULL_RECORD_LENGTH));
  } else {
    //read from disk
    recordBuf = new DynBuffer(new Buffer(FULL_RECORD_LENGTH), 0, FULL_RECORD_LENGTH);
    db.file.seek(recordPointer);
    db.file.readFully(recordBuf.source);
  }

  // get country
  record.countryCode = countriesData.codes[recordBuf.readUInt8(0)];
  record.countryName = countriesData.names[recordBuf.readUInt8(0)];
  // get continent
  record.continentCode = continentsData[record.countryCode] || '--';

  recordBufOffset++;

  // get region
  var byte;
  var region = '';
  while (true) {
    byte = recordBuf.at(recordBufOffset + pointer);
    if (byte === 0) break;
    region += String.fromCharCode(byte);
    pointer++;
  }

  record.region = region || null;
  // while (recordBuf.at(recordBufOffset + pointer) !== 0x00)
  //   pointer++;

  // if (pointer > 0)
  //   record.region = recordBuf.toString('binary', recordBufOffset, recordBufOffset + pointer);

  record.regionName = module.exports.getRegionName(record.countryCode, record.region);

  recordBufOffset += pointer + 1;
  pointer = 0;

  // get city
  var city = '';
  while (true) {
    byte = recordBuf.at(recordBufOffset + pointer);
    if (byte === 0) break;
    city += String.fromCharCode(byte);
    pointer++;
  }

  record.city = city || null;

  // while (recordBuf.at(recordBufOffset + pointer) !== 0x00)
  //   pointer++;

  // if (pointer > 0)
  //   record.city = recordBuf.toString('binary', recordBufOffset, recordBufOffset + pointer);

  recordBufOffset += pointer + 1;
  pointer = 0;

  // get postal code
  var po = '';
  while (true) {
    byte = recordBuf.at(recordBufOffset + pointer);
    if (byte === 0) break;
    po += String.fromCharCode(byte);
    pointer++;
  }
  record.postalCode = po || null;

  // while (recordBuf.at(recordBufOffset + pointer) !== 0x00)
  //   pointer++;

  // if (pointer > 0)
  //   record.postalCode = recordBuf.toString('binary', recordBufOffset, recordBufOffset + pointer);

  recordBufOffset += pointer + 1;

  // get latitude
  latitude = (recordBuf.readUInt8(recordBufOffset + 0) << (0 * 8)) +
    (recordBuf.readUInt8(recordBufOffset + 1) << (1 * 8)) +
    (recordBuf.readUInt8(recordBufOffset + 2) << (2 * 8));

  record.latitude = latitude / 10000 - 180;
  recordBufOffset += 3;

  // get longitude
  longitude = (recordBuf.readUInt8(recordBufOffset + 0) << (0 * 8)) +
    (recordBuf.readUInt8(recordBufOffset + 1) << (1 * 8)) +
    (recordBuf.readUInt8(recordBufOffset + 2) << (2 * 8));

  record.longitude = longitude / 10000 - 180;

  record.dmaCode = record.metroCode = 0;
  record.areaCode = 0;

  if (db.type === DatabaseInfo.CITY_EDITION_REV1) {
    // get DMA code
    var metroareaCombo = 0;
    if (record.countryCode === 'US') {
      recordBufOffset += 3;

      metroareaCombo += (recordBuf.readUInt8(recordBufOffset + 0) << (0 * 8)) +
        (recordBuf.readUInt8(recordBufOffset + 1) << (1 * 8)) +
        (recordBuf.readUInt8(recordBufOffset + 2) << (2 * 8));

      record.metroCode = record.dmaCode = parseInt(metroareaCombo / 1000);
      record.areaCode = metroareaCombo % 1000;
    }
  }

  return record;
};


module.exports.getRegionName = function(countryCode, regionCode) {
  var regionCode2;

  if (!regionCode)
    return null;

  // not quite sure that those calculations really required,
  // since we use the same in the generator script
  var fst = regionCode.charCodeAt(0),
    scd = regionCode.charCodeAt(1);

  if ((fst >= 48 && fst < 48 + 10) && (scd >= 48 && scd < 48 + 10)) {
    // only numbers, that shorten the large switch statements
    regionCode2 = (fst - 48) * 10 + scd - 48;
  } else if ((
    (fst >= 65 && fst < 65 + 26) || (fst >= 48 && fst < 48 + 10)
  ) && (
    (scd >= 65 && scd < 65 + 26) || (scd >= 48 && scd < 48 + 10)
  )) {
    regionCode2 = (fst - 48) * (65 + 26 - 48) + scd - 48 + 100;
  }

  if (!regionCode2 || !regionNameData[countryCode])
    return null;

  return regionNameData[countryCode][regionCode2];
};

}).call(this,require("buffer").Buffer)
},{"../data/continents":3,"../data/country_data":4,"../data/region_name_data":5,"../database_info":7,"../dyn_buffer":8,"../location":11,"buffer":21}],14:[function(require,module,exports){
(function (Buffer){
var DynBuffer = require('../dyn_buffer');

const MAX_ORG_RECORD_LENGTH = 300;


module.exports = function(db, cseek) {
  var recordBuf,
    pointer = 0,
    byte,
    org = '';

  if (cseek === db.segment)
    return null;

  var recordPointer = cseek + (2 * db.recordLength - 1) * db.segment;

  if (db.opts.memoryCache) {
    recordBuf = new DynBuffer(db.dbbuffer, recordPointer,
      Math.min(db.dbbuffer.length - recordPointer, MAX_ORG_RECORD_LENGTH));
  } else {
    recordBuf = new DynBuffer(new Buffer(MAX_ORG_RECORD_LENGTH), 0, MAX_ORG_RECORD_LENGTH);
    db.file.seek(recordPointer);
    db.file.readFully(recordBuf.source);
  }

  while (true) {
    byte = recordBuf.at(pointer);
    if (byte === 0) break;
    org += String.fromCharCode(byte);
    pointer++;
  }

  return org || null;
};

}).call(this,require("buffer").Buffer)
},{"../dyn_buffer":8,"buffer":21}],15:[function(require,module,exports){
var Region = require('../region'),
  DatabaseInfo = require('../database_info');

var countriesData = require('../data/country_data');
var continentsData = require('../data/continents');

const STATE_BEGIN_REV0 = 16700000;
const STATE_BEGIN_REV1 = 16000000;
const US_OFFSET = 1;
const CANADA_OFFSET = 677;
const WORLD_OFFSET = 1353;
const FIPS_RANGE = 360;


module.exports = function(db, cseek) {
  var record = new Region(),
    seekRegion = 0;

  if (db.type === DatabaseInfo.REGION_EDITION_REV0) {
    seekRegion = cseek - STATE_BEGIN_REV0;

    if (seekRegion >= 1000) {
      record.countryCode = 'US';
      record.countryName = 'United States';
      record.continentCode = 'NA';
      record.region = String.fromCharCode(
        ((seekRegion - 1000) / 26) + 65,
        ((seekRegion - 1000) % 26) + 65
      );

    } else {
      record.countryCode = countriesData.codes[seekRegion];
      record.countryName = countriesData.names[seekRegion];
      record.continentCode = continentsData[record.countryCode] || '--';
      record.region = '';
    }

  } else if (db.type === DatabaseInfo.REGION_EDITION_REV1) {
    seekRegion = cseek - STATE_BEGIN_REV1;

    if (seekRegion < US_OFFSET) {
      record.countryCode = '';
      record.countryName = '';
      record.continentCode = '';
      record.region = '';

    } else if (seekRegion < CANADA_OFFSET) {
      record.countryCode = 'US';
      record.countryName = 'United States';
      record.continentCode = 'NA';
      record.region = String.fromCharCode(
        ((seekRegion - US_OFFSET)/26) + 65,
        ((seekRegion - US_OFFSET)%26) + 65
      );

    } else if (seekRegion < WORLD_OFFSET) {
      record.countryCode = 'CA';
      record.countryName = 'Canada';
      record.continentCode = 'NA';
      record.region = String.fromCharCode(
        ((seekRegion - CANADA_OFFSET)/26) + 65,
        ((seekRegion - CANADA_OFFSET)%26) + 65
      );

    } else {
      record.countryCode = countriesData.codes[(seekRegion - WORLD_OFFSET) / FIPS_RANGE];
      record.countryName = countriesData.names[(seekRegion - WORLD_OFFSET) / FIPS_RANGE];
      record.continentCode = continentsData[record.countryCode] || '--';
      record.region = '';
    }
  }
  return record;
};

},{"../data/continents":3,"../data/country_data":4,"../database_info":7,"../region":17}],16:[function(require,module,exports){
(function (Buffer){
var net = require('net');

var Database    = require('./database'),
  DatabaseInfo = require('./database_info'),
  DynBuffer   = require('./dyn_buffer');

var lookupCtr = require('./lookup/country');
var lookupLoc = require('./lookup/location');
var lookupReg = require('./lookup/region');
var lookupOrg = require('./lookup/organization');
var ip = require('./ip');

const GEOIP_STANDARD = 0;
const GEOIP_MEMORY_CACHE = 1;
const GEOIP_CHECK_CACHE = 2;
const GEOIP_INDEX_CACHE = 4;

const MAX_RECORD_LENGTH = 4;


var _dbs = [];
var _inited = false;
var _paths = [];

function _getDb(types) {
  for (var i = _dbs.length - 1; i >= 0; i--) {
    if (~types.indexOf(_dbs[i].type))
      return _dbs[i];
  }

  var available = _dbs.map(function(d) {
    return d.type;
  }).join(',');
  throw new Error('Required DB not available. Possible types: "' + available + '"');
}

exports.getDb = _getDb;


exports.init = function(paths, opts) {

  if (typeof paths === 'string')
    paths = [ paths ];

  for (var i = 0; i < paths.length; i++) {
    var path = paths[i];
    // already initialized
    if (_paths.indexOf(path) > -1)
      continue;

    _dbs.push(new Database(path, opts));
  }

  _inited = true;
  _paths = paths;

  return true;
};


exports.uninit = function() {
  for (var i = _dbs.length - 1; i >= 0; i--) {
    var db = _dbs[i];
    if (db.file) {
      db.file.close();
      db.file = null;
    }
  }

  _dbs = [];
  _paths = [];
  _inited = false;
  return true;
};


exports.seekCountry = function(db, ipAddress) {

  if (typeof ipAddress === 'string')
    ipAddress = ip.v4ToLong(ipAddress);

  if (db.opts.checkForUpdates)
    db.checkForUpdates();

  var buf;
  var next, y, record;
  var offset = 0;

  for (var depth = 31; depth >= 0; depth--) {

    // read from memory
    if (db.opts.memoryCache) {
      buf = new DynBuffer(db.dbbuffer, 2 * db.recordLength * offset, 2 * MAX_RECORD_LENGTH);

    // read from index cache
    } else if (db.opts.indexCache) {
      buf = new DynBuffer(db.indexCache, 2 * db.recordLength * offset, 2 * MAX_RECORD_LENGTH);

    // read from disk
    } else {
      buf = new DynBuffer(new Buffer(2 * MAX_RECORD_LENGTH), 0, 2 * MAX_RECORD_LENGTH);
      db.file.seek(2 * db.recordLength * offset);
      db.file.readFully(buf.source);
    }

    // Binary tree consists of certain (db.segments) number of nodes. Each
    // node has a fixed length and usually 6-8 bytes. It has two "sides", left
    // and right:
    // |         node        |
    // | 0x000000 | 0x000000 |

    // If current IP address bit is `0` the we pick left record,
    // when `1` then right record.
    record = Math.abs(ipAddress & (1 << depth)) > 0 ? 1 : 0

    // Convert node value from big-endian to little-endian
    // 0x010000 -> 0x000010
    next = 0;
    for (var j = 0; j < db.recordLength; j++) {
      y = buf.at(record * db.recordLength + j);
      next += (y << (j * 8));
    }

    // If pointer points to outside of binary search tree data block then
    // it means we've found our match.
    if (next >= db.segment) {
      db.lastNetmask = 32 - depth;
      return next;
    }

    // Continue otherwise
    offset = next;
  }

  throw new Error('Should not reach here');
};


// https://github.com/whitequark/ipaddr.js/blob/master/test/ipaddr.test.coffee
exports.seekCountryV6 = function(db, ipAddress) {
  var v6vec = typeof ipAddress === 'string' ? ip.v6ToArray(ipAddress) : ipAddress;

  if (db.opts.checkForUpdates)
    db.checkForUpdates();

  var buf;
  var offset = 0;

  var x0, x1, y;
  var depth, i, i;

  var bnum, idx, b_mask;

  for (depth = 127; depth >= 0; depth--) {
    // read from memory
    if (db.opts.memoryCache) {
      buf = new DynBuffer(db.dbbuffer, 2 * db.recordLength * offset, 2 * MAX_RECORD_LENGTH);

    // read from index cache
    } else if (db.opts.indexCache) {
      buf = new DynBuffer(db.indexCache, 2 * db.recordLength * offset, 2 * MAX_RECORD_LENGTH);

    // read from disk
    } else {
      buf = new DynBuffer(new Buffer(2 * MAX_RECORD_LENGTH), 0, 2 * MAX_RECORD_LENGTH);
      db.file.seek(2 * db.recordLength * offset);
      db.file.readFully(buf.source);
    }

    x0 = x1 = 0;
    for (j = 0; j < db.recordLength; j++) {
      y = buf.at(0 * db.recordLength + j);
      x0 += (y << (j * 8));

      y = buf.at(1 * db.recordLength + j);
      x1 += (y << (j * 8));
    }

    bnum = 127 - depth;
    idx = bnum >> 3;
    b_mask = 1 << (bnum & 7 ^ 7);

    if ((v6vec[idx] & b_mask) > 0) {
      if (x1 >= db.segment) {
        db.lastNetmask = 128 - depth;
        return x1;
      }
      offset = x1;
    } else {
      if (x0 >= db.segment) {
        db.lastNetmask = 128 - depth;
        return x0;
      }
      offset = x0;
    }
  }

  throw new Error('Should not reach here');
};


exports.getCountry = function(ipv4) {
  var db = _getDb([
    DatabaseInfo.COUNTRY_EDITION,
    DatabaseInfo.LARGE_COUNTRY_EDITION,
    DatabaseInfo.PROXY_EDITION,
    DatabaseInfo.NETSPEED_EDITION
  ]);

  return lookupCtr(db, this.seekCountry(db, ipv4));
};


exports.getCountryV6 = function(ipv6) {
  var db = _getDb([
    DatabaseInfo.COUNTRY_EDITION_V6
  ]);

  return lookupCtr(db, this.seekCountryV6(db, ipv6));
};


exports.getLocation = function(ipv4) {
  var db = _getDb([
    DatabaseInfo.CITY_EDITION_REV0,
    DatabaseInfo.CITY_EDITION_REV1
  ]);

  return lookupLoc(db, this.seekCountry(db, ipv4));
};

exports.getLocationV6 = function(ipv6) {
  var db = _getDb([
    DatabaseInfo.CITY_EDITION_REV0_V6,
    DatabaseInfo.CITY_EDITION_REV1_V6
  ]);

  return lookupLoc(db, this.seekCountryV6(db, ipv6));
};


exports.getRegion = function(ipv4) {
  var db = _getDb([
    DatabaseInfo.REGION_EDITION_REV0,
    DatabaseInfo.REGION_EDITION_REV1
  ]);

  return lookupReg(db, this.seekCountry(db, ipv4));
};


// GeoIP Organization and ISP Edition methods
exports.lookupOrg = function(addr, types) {
  var db = _getDb(types);
  return lookupOrg(db, this.seekCountry(db, addr));
};


exports.lookupOrgV6 = function(addr, types) {
  var db = _getDb(types);
  return lookupOrg(db, this.seekCountryV6(db, addr));
};



exports.getOrganization = function(ipv4) {
  return exports.lookupOrg(ipv4, [
    DatabaseInfo.ORG_EDITION,
    DatabaseInfo.ISP_EDITION,
    DatabaseInfo.DOMAIN_EDITION,
    DatabaseInfo.ASNUM_EDITION,
    DatabaseInfo.ACCURACYRADIUS_EDITION,
    DatabaseInfo.NETSPEED_EDITION_REV1,
    DatabaseInfo.USERTYPE_EDITION,
    DatabaseInfo.REGISTRAR_EDITION,
    DatabaseInfo.LOCATIONA_EDITION,
    DatabaseInfo.CITYCONF_EDITION,
    DatabaseInfo.COUNTRYCONF_EDITION,
    DatabaseInfo.REGIONCONF_EDITION,
  ]);
};


exports.getOrganizationV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [
    DatabaseInfo.ORG_EDITION_V6,
    DatabaseInfo.ISP_EDITION_V6,
    DatabaseInfo.DOMAIN_EDITION_V6,
    DatabaseInfo.ASNUM_EDITION_V6,
    DatabaseInfo.ACCURACYRADIUS_EDITION_V6,
    DatabaseInfo.NETSPEED_EDITION_REV1_V6,
    DatabaseInfo.USERTYPE_EDITION_V6,
    DatabaseInfo.REGISTRAR_EDITION_V6,
    DatabaseInfo.LOCATIONA_EDITION_V6
  ]);
};


exports.getNetSpeed = function(ipv4) {
  return exports.lookupOrg(ipv4, [DatabaseInfo.NETSPEED_EDITION_REV1]);
};


exports.getNetSpeedV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [DatabaseInfo.NETSPEED_EDITION_REV1_V6]);
};


exports.getIsp = function(ipv4) {
  return exports.lookupOrg(ipv4, [DatabaseInfo.ISP_EDITION]);
};


exports.getIspV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [DatabaseInfo.ISP_EDITION_V6]);
};


exports.getAsn = function(ipv4) {
  return exports.lookupOrg(ipv4, [DatabaseInfo.ASNUM_EDITION]);
};


exports.getAsnV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [DatabaseInfo.ASNUM_EDITION_V6]);
};


exports.getDomain = function(ipv4) {
  return exports.lookupOrg(ipv4, [DatabaseInfo.DOMAIN_EDITION]);
};


exports.getDomainV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [DatabaseInfo.DOMAIN_EDITION_V6]);
};


exports.getUserType = function(ipv4) {
  return exports.lookupOrg(ipv4, [DatabaseInfo.USERTYPE_EDITION]);
};


exports.getUserTypeV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [DatabaseInfo.USERTYPE_EDITION_V6]);
};


exports.getRegistrar = function(ipv4) {
  return exports.lookupOrg(ipv4, [DatabaseInfo.REGISTRAR_EDITION]);
};


exports.getRegistrarV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [DatabaseInfo.REGISTRAR_EDITION_V6]);
};


exports.getAccuracyRadius = function(ipv4) {
  return exports.lookupOrg(ipv4, [DatabaseInfo.ACCURACYRADIUS_EDITION]);
};


exports.getAccuracyRadiusV6 = function(ipv6) {
  return exports.lookupOrgV6(ipv6, [DatabaseInfo.ACCURACYRADIUS_EDITION_V6]);
};


exports.validate = function(ip) {
  var version = net.isIP(ip);
  switch (version) {
    case 4:
      return net.isIPv4(ip);
    case 6:
      return net.isIPv6(ip);
    case 0:
      return false
    default:
      throw new Error('net.isIP call returned unexpected value: "' + version + '"')
  }
};

}).call(this,require("buffer").Buffer)
},{"./database":6,"./database_info":7,"./dyn_buffer":8,"./ip":10,"./lookup/country":12,"./lookup/location":13,"./lookup/organization":14,"./lookup/region":15,"buffer":21,"net":18}],17:[function(require,module,exports){

module.exports = function() {
  this.countryCode = null;
  this.countryName = null;
  this.region = null;
};

},{}],18:[function(require,module,exports){

},{}],19:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":27}],20:[function(require,module,exports){
;(function (exports) {
  'use strict'

  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

  var PLUS = '+'.charCodeAt(0)
  var SLASH = '/'.charCodeAt(0)
  var NUMBER = '0'.charCodeAt(0)
  var LOWER = 'a'.charCodeAt(0)
  var UPPER = 'A'.charCodeAt(0)
  var PLUS_URL_SAFE = '-'.charCodeAt(0)
  var SLASH_URL_SAFE = '_'.charCodeAt(0)

  function decode (elt) {
    var code = elt.charCodeAt(0)
    if (code === PLUS || code === PLUS_URL_SAFE) return 62 // '+'
    if (code === SLASH || code === SLASH_URL_SAFE) return 63 // '/'
    if (code < NUMBER) return -1 // no match
    if (code < NUMBER + 10) return code - NUMBER + 26 + 26
    if (code < UPPER + 26) return code - UPPER
    if (code < LOWER + 26) return code - LOWER + 26
  }

  function b64ToByteArray (b64) {
    var i, j, l, tmp, placeHolders, arr

    if (b64.length % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    var len = b64.length
    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(b64.length * 3 / 4 - placeHolders)

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? b64.length - 4 : b64.length

    var L = 0

    function push (v) {
      arr[L++] = v
    }

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
      push((tmp & 0xFF0000) >> 16)
      push((tmp & 0xFF00) >> 8)
      push(tmp & 0xFF)
    }

    if (placeHolders === 2) {
      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
      push(tmp & 0xFF)
    } else if (placeHolders === 1) {
      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
      push((tmp >> 8) & 0xFF)
      push(tmp & 0xFF)
    }

    return arr
  }

  function uint8ToBase64 (uint8) {
    var i
    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes
    var output = ''
    var temp, length

    function encode (num) {
      return lookup.charAt(num)
    }

    function tripletToBase64 (num) {
      return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
    }

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
      output += tripletToBase64(temp)
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    switch (extraBytes) {
      case 1:
        temp = uint8[uint8.length - 1]
        output += encode(temp >> 2)
        output += encode((temp << 4) & 0x3F)
        output += '=='
        break
      case 2:
        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
        output += encode(temp >> 10)
        output += encode((temp >> 4) & 0x3F)
        output += encode((temp << 2) & 0x3F)
        output += '='
        break
      default:
        break
    }

    return output
  }

  exports.toByteArray = b64ToByteArray
  exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],21:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(array)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// Even though this property is private, it shouldn't be removed because it is
// used by `is-buffer` to detect buffer instances in Safari 5-7.
Buffer.prototype._isBuffer = true

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":20,"ieee754":23,"isarray":22}],22:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],23:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],24:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],25:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],26:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],27:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":26,"_process":25,"inherits":24}]},{},[1]);
